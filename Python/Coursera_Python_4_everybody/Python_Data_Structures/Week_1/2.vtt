WEBVTT

1
00:00:08.109 --> 00:00:10.580
Hello and welcome to Chapter 6.

2
00:00:10.580 --> 00:00:12.355
Now we're going to talk about strings.

3
00:00:12.355 --> 00:00:15.320
This is really the last chapter 
that I'm just going to ask you

4
00:00:15.320 --> 00:00:20.074
to please learn something without 
exactly knowing how to do it.

5
00:00:20.074 --> 00:00:21.859
We're just sort of chopping food.

6
00:00:21.859 --> 00:00:23.565
It's like you're going to be a 
chef eventually,

7
00:00:23.565 --> 00:00:24.780
but we're just chopping food.

8
00:00:24.780 --> 00:00:28.550
So Chapter 6 is the last chapter that you 
just have to learn how to chop food.

9
00:00:28.550 --> 00:00:31.445
We're going to actually make a 
meal in Chapter 7.

10
00:00:31.445 --> 00:00:33.619
Once we have a file, then 
all of the things that

11
00:00:33.619 --> 00:00:35.844
we've learn how to do are 
going to come into play.

12
00:00:35.844 --> 00:00:39.314
So just trust me and listen 
for one more chapter.

13
00:00:39.314 --> 00:00:41.554
So we literally have been using strings from

14
00:00:41.554 --> 00:00:46.670
the very first moment because the first thing 
we did is print Hello world, and so,

15
00:00:46.670 --> 00:00:49.759
you know, this is a slide from a 
couple of lectures ago.

16
00:00:49.759 --> 00:00:53.789
And so, you know, we take two strings,

17
00:00:53.789 --> 00:00:54.929
double quote, single quotes,

18
00:00:54.929 --> 00:00:56.789
we use the plus, remember it looks to the left,

19
00:00:56.789 --> 00:00:58.500
looks to the right, concatenates,

20
00:00:58.500 --> 00:01:00.825
remember that doesn't put a space there.

21
00:01:00.825 --> 00:01:03.179
And here's a string that has digits.

22
00:01:03.179 --> 00:01:05.810
And now we're going to try to add 1 to it, 
and it blows up.

23
00:01:05.810 --> 00:01:07.950
Yeah. You know, it's hardly even – you're not

24
00:01:07.950 --> 00:01:10.230
really sad when you see traceback 
by now, hopefully.

25
00:01:10.230 --> 00:01:13.700
You're just like, oh, traceback's 
a normal thing. I'm trying to learn.

26
00:01:13.700 --> 00:01:16.460
TypeError: cannot concatenate 
strings and integer.

27
00:01:16.460 --> 00:01:20.094
It's trying to tell you what's going on.
And we're all good.

28
00:01:20.094 --> 00:01:21.329
We then take the string,

29
00:01:21.329 --> 00:01:22.995
we pass it to the int function,

30
00:01:22.995 --> 00:01:25.484
and then that comes back with 123,

31
00:01:25.484 --> 00:01:28.620
and we add that and it becomes 124.

32
00:01:28.620 --> 00:01:29.760
So it's all good, right?

33
00:01:29.760 --> 00:01:33.439
It's all good, and we've been 
doing that for a while.

34
00:01:33.439 --> 00:01:35.775
Another thing we've been doing is 
reading data from input.

35
00:01:35.775 --> 00:01:40.930
The input function prints out a prompt. 
That's a prompt.

36
00:01:40.930 --> 00:01:45.790
We type something, and then whatever that is 
comes back as the result of the function,

37
00:01:45.790 --> 00:01:47.465
and then it gets stuck into name,

38
00:01:47.465 --> 00:01:49.420
and so if we print that – print, of course,

39
00:01:49.420 --> 00:01:51.969
is also a function -- we pass name in, 
and we get out Chuck.

40
00:01:51.969 --> 00:01:55.750
Even if we enter some numbers, like 100,

41
00:01:55.750 --> 00:02:00.219
right, that doesn't make apple a integer. 
Apple is a string.

42
00:02:00.219 --> 00:02:03.755
Input gives us back a string,

43
00:02:03.755 --> 00:02:06.730
so we can't subtract 10 from it. 
Traceback again.

44
00:02:06.730 --> 00:02:09.564
But if we can convert it to an integer 
and then subtract 10,

45
00:02:09.564 --> 00:02:13.050
then we can get that 100 minus 10 
becomes 90.

46
00:02:13.050 --> 00:02:15.879
So we've been manipulating strings and using

47
00:02:15.879 --> 00:02:18.909
internal functions and converting them 
to floats and doing this,

48
00:02:18.909 --> 00:02:21.574
that, and the other thing 
as we have gone forward.

49
00:02:21.574 --> 00:02:24.639
But now, we're going to start 
tearing apart strings.

50
00:02:24.639 --> 00:02:28.509
So, the ultimate thing we're going to do 
is read through a bunch of data,

51
00:02:28.509 --> 00:02:30.490
tear that data apart,

52
00:02:30.490 --> 00:02:34.139
read line by line, and then look at 
each line and find things in the line.

53
00:02:34.139 --> 00:02:37.509
So we need to know that a line of 
characters, many characters,

54
00:02:37.509 --> 00:02:39.129
which turns into, would be a string,

55
00:02:39.129 --> 00:02:43.460
a multi-character string, has 
indexable data within it.

56
00:02:43.460 --> 00:02:47.980
So, the string banana – and 
I didn't come up with banana.

57
00:02:47.980 --> 00:02:52.360
Actually, the book that I use is 
based on a book by two people,

58
00:02:52.360 --> 00:02:53.965
Allen Downey and Jeff Elkner,

59
00:02:53.965 --> 00:02:56.139
and one of those two came up with banana.

60
00:02:56.139 --> 00:02:59.259
I would never have come up with banana 
because I don't know how to spell banana,

61
00:02:59.259 --> 00:03:03.009
and I'm terrified of having 
a slide or the book with

62
00:03:03.009 --> 00:03:04.750
a mistyped banana because I just think

63
00:03:04.750 --> 00:03:07.159
somewhere in banana there's 
supposed to be two n's.

64
00:03:07.159 --> 00:03:09.805
But, and I read this and it looks 
like a misspelling to me,

65
00:03:09.805 --> 00:03:11.034
but I'm pretty sure that's right.

66
00:03:11.034 --> 00:03:13.275
But that's neither here nor there.

67
00:03:13.275 --> 00:03:14.965
We have this string banana,

68
00:03:14.965 --> 00:03:17.233
which is six characters, 
and we stick it in fruit.

69
00:03:17.233 --> 00:03:18.759
And if we look in fruit,

70
00:03:18.759 --> 00:03:21.064
you can actually pull each character out.

71
00:03:21.064 --> 00:03:23.349
We call this the index operator,

72
00:03:23.349 --> 00:03:26.425
and the square brackets are 
the index operator.

73
00:03:26.425 --> 00:03:29.219
And I pronounce this sub,

74
00:03:29.219 --> 00:03:30.909
so that's fruit sub one.

75
00:03:30.909 --> 00:03:32.469
Now, as we look at the index,

76
00:03:32.469 --> 00:03:33.759
the first one is zero.

77
00:03:33.759 --> 00:03:36.340
Now that's counterintuitive – 
it goes right back

78
00:03:36.340 --> 00:03:40.750
to elevators in Europe that have 
zero as the first floor.

79
00:03:40.750 --> 00:03:42.550
Right? Zero's the first floor,

80
00:03:42.550 --> 00:03:45.879
so Python was invented 
in the Netherlands –

81
00:03:45.879 --> 00:03:49.409
that's Europe – and so 
all the elevators are zero,

82
00:03:49.409 --> 00:03:50.939
so the first thing is zero.

83
00:03:50.939 --> 00:03:53.680
Actually, that's not the reason at all.

84
00:03:53.680 --> 00:03:56.379
The reason has to do with 
performance in computer science,

85
00:03:56.379 --> 00:04:01.179
where zero is easier to add than 
subtracting one, but whatever.

86
00:04:01.179 --> 00:04:05.319
Just remember: the first thing, 
the second thing,

87
00:04:05.319 --> 00:04:07.694
the third thing, fourth thing
is sub zero.

88
00:04:07.694 --> 00:04:09.069
So this is a six-character string,

89
00:04:09.069 --> 00:04:14.080
but the last position is position five.

90
00:04:14.080 --> 00:04:15.849
You'll get it; it won't take you long.

91
00:04:15.849 --> 00:04:17.800
It will seem natural pretty soon.

92
00:04:17.800 --> 00:04:18.819
Right now, it seems unnatural.

93
00:04:18.819 --> 00:04:21.100
So fruit sub one,

94
00:04:21.100 --> 00:04:23.509
that means the character in position one.

95
00:04:23.509 --> 00:04:25.269
So, a ends up in letter,

96
00:04:25.269 --> 00:04:27.310
and so we indeed can verify that.

97
00:04:27.310 --> 00:04:30.699
This thing inside of the brackets 
can be an expression,

98
00:04:30.699 --> 00:04:32.259
it can be a variable, it can be anything you

99
00:04:32.259 --> 00:04:33.939
want. There's a constant,
 here's an expression.

100
00:04:33.939 --> 00:04:36.780
x is 3, x minus 1, that becomes 2,

101
00:04:36.780 --> 00:04:42.920
so fruit sub two comes down here to x 
and we see the n that comes out of that.

102
00:04:42.920 --> 00:04:45.560
So, that's the index operator.

103
00:04:45.560 --> 00:04:48.860
We pronounce it as sub, you know,

104
00:04:48.860 --> 00:04:54.800
fruit sub x minus one is how I 
pronounce that last little bit.

105
00:04:54.800 --> 00:04:59.550
And so, it wouldn't be Python 
if we didn't have a traceback,

106
00:04:59.550 --> 00:05:01.725
and in this one, I'm making a mistake.

107
00:05:01.725 --> 00:05:04.290
And that mistake is I'm going beyond abc,

108
00:05:04.290 --> 00:05:05.587
which is zero, one, and two.

109
00:05:05.587 --> 00:05:08.610
And so, zot sub five.

110
00:05:08.610 --> 00:05:11.459
No, sorry. Python is angry at us.

111
00:05:11.459 --> 00:05:14.568
Python is angry at us,

112
00:05:14.568 --> 00:05:18.500
and so we get an index error.
IndexError: string out of range.

113
00:05:18.500 --> 00:05:22.949
Oh, well, I mean string index – well 
this is the string, that's the index.

114
00:05:22.949 --> 00:05:25.230
That's the word. We're doing an index operator,

115
00:05:25.230 --> 00:05:28.319
a look-up operator, or a sub operator.

116
00:05:28.319 --> 00:05:31.529
So, that's just a thing 
you're not supposed to do.

117
00:05:31.529 --> 00:05:34.329
After a while, you kind of get used to

118
00:05:34.329 --> 00:05:38.060
the idea that Python is just going to 
traceback on you from time to time.

119
00:05:38.060 --> 00:05:39.910
There is a number of functions.

120
00:05:39.910 --> 00:05:43.764
We can pass a string into the len function,

121
00:05:43.764 --> 00:05:45.580
and we can get the length.

122
00:05:45.580 --> 00:05:47.200
The length of this is six characters.

123
00:05:47.200 --> 00:05:48.594
It is indeed six characters;

124
00:05:48.594 --> 00:05:50.211
even though it's zero through five,

125
00:05:50.211 --> 00:05:53.105
it's still six characters.

126
00:05:53.105 --> 00:05:55.485
So the len is just another function,

127
00:05:55.485 --> 00:05:57.324
we talked about functions before.

128
00:05:57.324 --> 00:06:00.050
Functions take as input some parameter,

129
00:06:00.050 --> 00:06:03.435
so fruit is assigned into banana, 
and then we're doing this.

130
00:06:03.435 --> 00:06:05.689
Remember, we evaluate the right-hand side here.

131
00:06:05.689 --> 00:06:07.569
This fruit gets passed into len,

132
00:06:07.569 --> 00:06:11.050
so the string banana is passed 
into the len function.

133
00:06:11.050 --> 00:06:14.199
The len function does something 
in the middle of it,

134
00:06:14.199 --> 00:06:19.329
and then the len returns us a 6 
with the return statement,

135
00:06:19.329 --> 00:06:22.949
and then that 6 goes – that's 
an integer 6 – goes to x,

136
00:06:22.949 --> 00:06:25.350
so then we print it out 
and we get the 6.

137
00:06:25.350 --> 00:06:31.554
Okay, so len is a function, takes 
an input parameter, and away we go.

138
00:06:31.554 --> 00:06:34.685
And so inside of len,

139
00:06:34.685 --> 00:06:37.845
there is some code that takes this.

140
00:06:37.845 --> 00:06:39.800
It's got a for loop or 
who knows what's in here,

141
00:06:39.800 --> 00:06:41.834
and then it's got a return statement,

142
00:06:41.834 --> 00:06:44.089
and then it returns the stuff which then

143
00:06:44.089 --> 00:06:47.089
replaces this as the residual value 
in the expression,

144
00:06:47.089 --> 00:06:49.175
and then the assignment statement finishes,

145
00:06:49.175 --> 00:06:51.079
and then 6 ends up in x,

146
00:06:51.079 --> 00:06:53.750
and away we go.

147
00:06:53.750 --> 00:06:57.050
So, there's lots of things that you can do 
with strings. Asking how long they

148
00:06:57.050 --> 00:07:01.560
are is one of the things that you 
can do with a string.

149
00:07:01.560 --> 00:07:03.384
Now, we want to loop through a string.

150
00:07:03.384 --> 00:07:06.649
Well, given that we can have this 
index operator sub,

151
00:07:06.649 --> 00:07:09.800
we can then generate a sequence of 
numbers zero, one, two,

152
00:07:09.800 --> 00:07:13.185
three, four, five, and then we can 
look up all of the things, right?

153
00:07:13.185 --> 00:07:15.620
And so to do that, you know,

154
00:07:15.620 --> 00:07:17.540
we got fruit banana and then 
index – this is

155
00:07:17.540 --> 00:07:20.240
our iteration variable – and we're 
going to construct a loop,

156
00:07:20.240 --> 00:07:21.350
where we're going to add 1,

157
00:07:21.350 --> 00:07:23.435
we're going to increment index by 1.

158
00:07:23.435 --> 00:07:26.105
And then we're going to say while index is 
less than len of fruit –

159
00:07:26.105 --> 00:07:29.310
and that's 6, not 5.

160
00:07:29.310 --> 00:07:31.899
And this will give us the numbers 
0 through 5.

161
00:07:31.899 --> 00:07:35.139
So this loop will run with index 
being 0 through 5.

162
00:07:35.139 --> 00:07:36.585
So the first time through it's 0,

163
00:07:36.585 --> 00:07:39.139
the second time through it's a 1, then a 2,

164
00:07:39.139 --> 00:07:45.969
and then we're going to take the sub zero letter 
and stick it in the string letter.

165
00:07:45.969 --> 00:07:48.964
Sorry, letter is a bad choice of a variable.

166
00:07:48.964 --> 00:07:51.589
This could be x, as long as this were x, 
it doesn't matter.

167
00:07:51.589 --> 00:07:53.079
It's just letter is a reasonably

168
00:07:53.079 --> 00:07:55.839
mnemonic variable unless you're 
trying to give a lecture.

169
00:07:55.839 --> 00:08:00.644
The letter is letter. The 
letter gets assigned into letter.

170
00:08:00.644 --> 00:08:04.355
So if I just said x, x,

171
00:08:04.355 --> 00:08:07.220
then I would say it looks up 
the letter at

172
00:08:07.220 --> 00:08:10.100
the position zero and then puts 
that letter into the variable x,

173
00:08:10.100 --> 00:08:11.449
and then we print out the variable x.

174
00:08:11.449 --> 00:08:14.819
Sometimes mnemonic, but there you go.

175
00:08:14.819 --> 00:08:17.120
So that's going to run six times

176
00:08:17.120 --> 00:08:18.469
zero, one, two, three, four, five, six,

177
00:08:18.469 --> 00:08:19.879
and each time it's going to print out

178
00:08:19.879 --> 00:08:25.079
the index and the letter that happens to 
be in that string at the index.

179
00:08:25.079 --> 00:08:30.800
So now we've got a loop that goes through 
each of the letters in a string.

180
00:08:30.800 --> 00:08:32.879
Now, that was the indeterminate loop.

181
00:08:32.879 --> 00:08:34.184
We had to construct it.

182
00:08:34.184 --> 00:08:37.620
We had to make our own iteration variable, etc.

183
00:08:37.620 --> 00:08:40.289
etc. etc. But a much more convenient way,

184
00:08:40.289 --> 00:08:42.345
unless you actually need to know the position,

185
00:08:42.345 --> 00:08:45.970
just if you want to go through 
all the letters in a loop,

186
00:08:45.970 --> 00:08:50.159
a much more convenient thing to do is 
just use a for – a determinate loop.

187
00:08:50.159 --> 00:08:52.715
Right? So, we're going to use for and in.

188
00:08:52.715 --> 00:08:55.304
And remember, in is like, you know,

189
00:08:55.304 --> 00:08:59.429
member of, for all the letters in the 
set fruit, but in this case,

190
00:08:59.429 --> 00:09:01.710
it's for the iteration variable letter

191
00:09:01.710 --> 00:09:04.379
taking on all the successive values 
of the characters of fruit,

192
00:09:04.379 --> 00:09:06.274
so letter's going to be b,

193
00:09:06.274 --> 00:09:07.620
then a, then n,

194
00:09:07.620 --> 00:09:09.125
then a, then n, then a.

195
00:09:09.125 --> 00:09:13.565
And that means it's going to run 
this loop six times,

196
00:09:13.565 --> 00:09:16.129
and each time through, letter is going 
to be something different,

197
00:09:16.129 --> 00:09:17.659
and so it just prints this out.

198
00:09:17.659 --> 00:09:22.174
And we didn't have to construct any of that 
index stuff or any of the fancy stuff,

199
00:09:22.174 --> 00:09:24.955
we just rock and roll our way right through that.

200
00:09:24.955 --> 00:09:28.615
Here's those two loops that I just showed you.

201
00:09:28.615 --> 00:09:32.458
Right? Here is the determinate loop 
with the for and the in;

202
00:09:32.458 --> 00:09:34.820
and it's nice and clean and they produce it.

203
00:09:34.820 --> 00:09:36.519
Here we construct index,

204
00:09:36.519 --> 00:09:38.455
have the while loop, use len,

205
00:09:38.455 --> 00:09:41.419
add 1 to index, pull the letter out,

206
00:09:41.419 --> 00:09:45.164
and so this line is the same as that line.

207
00:09:45.164 --> 00:09:48.889
So this is kind of like five lines 
of code or four lines of code,

208
00:09:48.889 --> 00:09:51.629
and this is like two lines of code.

209
00:09:51.629 --> 00:09:53.434
And this might not seem like much,

210
00:09:53.434 --> 00:09:56.884
but there's so many places that 
you can make a mistake here,

211
00:09:56.884 --> 00:09:59.524
you know, if this is like 
index + 2 or something.

212
00:09:59.524 --> 00:10:01.120
Now you do have more flexibility when you're

213
00:10:01.120 --> 00:10:03.710
constructing it this way and sometimes 
you do have to construct it,

214
00:10:03.710 --> 00:10:05.539
but to do the exact same thing,

215
00:10:05.539 --> 00:10:07.789
these two things are doing the exact same thing,

216
00:10:07.789 --> 00:10:12.230
and so it's always better to use a 
more succinct and direct way of describing

217
00:10:12.230 --> 00:10:14.450
your code rather than this more 

218
00:10:14.450 --> 00:10:16.995
this is like showing off how good 
you are with the while loop,

219
00:10:16.995 --> 00:10:18.730
but it's sort of unnecessary.

220
00:10:18.730 --> 00:10:23.779
So use the simplest bit of code that you 
can use to accomplish what you want.

221
00:10:23.779 --> 00:10:24.980
It's easier for you to write,

222
00:10:24.980 --> 00:10:26.000
it's easier for you to debug,

223
00:10:26.000 --> 00:10:30.019
and it's easier for someone else to 
understand as they're reading your code.

224
00:10:30.019 --> 00:10:35.000
So we can go back to the iteration chapter 
and think of all the things that we did,

225
00:10:35.000 --> 00:10:36.169
whether it was look for the largest,

226
00:10:36.169 --> 00:10:37.250
look for the smallest,

227
00:10:37.250 --> 00:10:38.544
see if something's there.

228
00:10:38.544 --> 00:10:40.730
What this is going to do is 
this is a simple loop that's

229
00:10:40.730 --> 00:10:43.340
going to go through and see how 
many a's are in a word.

230
00:10:43.340 --> 00:10:44.794
Now we happen to know by looking at it,

231
00:10:44.794 --> 00:10:47.330
but it gives you the sense of of iteration.

232
00:10:47.330 --> 00:10:50.985
So we take, you know, letter's going 
to to take on b a n a n a.

233
00:10:50.985 --> 00:10:55.100
It's going to run this code six times.

234
00:10:55.100 --> 00:10:58.302
And if the letter is an a, 
we do count = count + 1.

235
00:10:58.302 --> 00:11:00.389
We set it to 0 at the beginning.

236
00:11:00.389 --> 00:11:03.049
Remember how these loops do something at the 
beginning, they do something in the middle,

237
00:11:03.049 --> 00:11:06.424
and then they have kind of like 
the payoff at the very end.

238
00:11:06.424 --> 00:11:08.449
And so this just means every time 
the letter's a,

239
00:11:08.449 --> 00:11:09.602
we're going to add 1 to count,

240
00:11:09.602 --> 00:11:15.034
so this effectively is counting the 
number of a's in the word banana,

241
00:11:15.034 --> 00:11:19.904
and out comes 3 because there are 3 a's.

242
00:11:19.904 --> 00:11:22.475
Now if I misspelled it, there 
would be more n's and more a's,

243
00:11:22.475 --> 00:11:25.039
but luckily on this slide,

244
00:11:25.039 --> 00:11:27.289
I think it's spelled correctly.

245
00:11:27.289 --> 00:11:30.532
Now, I love this in,

246
00:11:30.532 --> 00:11:32.419
and we're going to use this to do

247
00:11:32.419 --> 00:11:34.695
a lot of things when we deal with 
files, when we deal with lists.

248
00:11:34.695 --> 00:11:37.129
This idea that in is kind of like

249
00:11:37.129 --> 00:11:40.774
this membership notion in algebra. 
Not that you have to know algebra,

250
00:11:40.774 --> 00:11:42.919
but if you do know algebra,

251
00:11:42.919 --> 00:11:46.620
it's like for x such that it's 
a member of this set.

252
00:11:46.620 --> 00:11:48.455
That's the concept of in.

253
00:11:48.455 --> 00:11:50.835
It's a very clean abstraction.

254
00:11:50.835 --> 00:11:52.580
Maybe you'll actually learn Python,

255
00:11:52.580 --> 00:11:54.950
and then you go back and learn algebra 
and you go'll like, Oh, yeah!

256
00:11:54.950 --> 00:11:56.115
This little member guy,

257
00:11:56.115 --> 00:11:59.370
that's kind of like an in statement, 
in statement in for.

258
00:11:59.370 --> 00:12:04.820
It's a very abstract concept 
that really says this is

259
00:12:04.820 --> 00:12:11.394
how we're supposed to just run 
this loop six times,

260
00:12:11.394 --> 00:12:13.039
you know, one, two, three,

261
00:12:13.039 --> 00:12:14.674
four, five, six, do it.

262
00:12:14.674 --> 00:12:18.289
Take care of all of the small details for me.

263
00:12:18.289 --> 00:12:21.379
Right? And this is again for me is 
the magic of the for loop,

264
00:12:21.379 --> 00:12:25.189
it's the Python for loop is – the for itself,

265
00:12:25.189 --> 00:12:30.090
the for loop does a couple of things.

266
00:12:30.090 --> 00:12:32.870
It decides how long the loop's going to run,

267
00:12:32.870 --> 00:12:34.799
when the loop starts, when the loop stops,

268
00:12:34.799 --> 00:12:38.654
and it advances the iteration variable 
automatically,

269
00:12:38.654 --> 00:12:40.159
so it decides, am I done?

270
00:12:40.159 --> 00:12:42.159
Go get the next letter, run it. Am I done?

271
00:12:42.159 --> 00:12:43.863
No, go get the next letter,

272
00:12:43.863 --> 00:12:46.674
go get the next letter, go get the 
next letter, go get the next letter.

273
00:12:46.674 --> 00:12:48.649
Oh, now I'm done and I'm going to quit.

274
00:12:48.649 --> 00:12:52.595
Right? And so, the for takes all of this,

275
00:12:52.595 --> 00:12:55.100
all that logic is in one statement.

276
00:12:55.100 --> 00:12:56.179
And like I said,

277
00:12:56.179 --> 00:12:58.190
the less code that you have to write,

278
00:12:58.190 --> 00:12:59.809
the better off that you are.

279
00:12:59.809 --> 00:13:05.440
Now that I showed you how to 
loop through strings.

280
00:13:05.440 --> 00:13:08.095
I want to show you ways that you 
don't have to loop through strings.

281
00:13:08.095 --> 00:13:11.110
And so, one of the things you do in strings is

282
00:13:11.110 --> 00:13:14.230
you basically want to grab a piece of the string.

283
00:13:14.230 --> 00:13:16.519
And so this is what we call slicing.

284
00:13:16.519 --> 00:13:19.509
And we're going to use the same 
square bracket to do slicing,

285
00:13:19.509 --> 00:13:25.389
except that we're going to put an expression 
in that tells us how far to go.

286
00:13:25.389 --> 00:13:28.384
So here we have a string, 0 through 11.

287
00:13:28.384 --> 00:13:29.845
Remember they start at 0.

288
00:13:29.845 --> 00:13:31.029
And so, in here,

289
00:13:31.029 --> 00:13:32.440
instead of saying s sub 0,

290
00:13:32.440 --> 00:13:33.955
which would be the first character,

291
00:13:33.955 --> 00:13:36.419
we say s sub 0 : 4.

292
00:13:36.419 --> 00:13:38.784
And so this gives us a range.

293
00:13:38.784 --> 00:13:44.480
Now, the key thing here is the end is 
up to but not including.

294
00:13:44.480 --> 00:13:45.796
OK, up to but not including.

295
00:13:45.796 --> 00:13:48.174
So when we say 0,

296
00:13:48.174 --> 00:13:50.875
start at 0 and go up to but don't include 4,

297
00:13:50.875 --> 00:13:53.169
that says up to but don't include 4.

298
00:13:53.169 --> 00:13:54.595
So we don't include 4.

299
00:13:54.595 --> 00:13:56.679
Now that, again, may seem counterintuitive,

300
00:13:56.679 --> 00:13:59.320
kind of like zero starting is counterintuitive,

301
00:13:59.320 --> 00:14:01.705
but I'll bet you'll see that 
there are times when it

302
00:14:01.705 --> 00:14:04.210
sort of makes sense to do up to but not including.

303
00:14:04.210 --> 00:14:08.190
So for now, just remember up to but not including.

304
00:14:08.190 --> 00:14:09.914
So if we go 6 to 7,

305
00:14:09.914 --> 00:14:11.495
well, 6 starts here,

306
00:14:11.495 --> 00:14:15.279
and then up to but not including 
doesn't include the 7,

307
00:14:15.279 --> 00:14:18.639
so that's why we get a capital P. And then,

308
00:14:18.639 --> 00:14:20.980
if we do 6 through 20,

309
00:14:20.980 --> 00:14:27.185
6, starting at 6 going up to – 
you'd think this would be a traceback,

310
00:14:27.185 --> 00:14:30.664
but it's not a traceback.

311
00:14:30.664 --> 00:14:32.690
It is okay.

312
00:14:32.690 --> 00:14:34.120
After a while,

313
00:14:34.120 --> 00:14:36.429
you're like, "I'm a little 
disappointed in you, Python.

314
00:14:36.429 --> 00:14:39.064
You're supposed to traceback 
every time I make a mistake."

315
00:14:39.064 --> 00:14:43.555
Well, somebody decided it was okay to 
reference beyond the end of a string.

316
00:14:43.555 --> 00:14:44.740
And we'll forgive you,

317
00:14:44.740 --> 00:14:47.290
it's not going to get anything, 
it's actually going to stop there,

318
00:14:47.290 --> 00:14:51.669
and that's why we get Python 
as the answer here.

319
00:14:51.669 --> 00:14:55.070
Now, given that the beginning and 
the end of the string are

320
00:14:55.070 --> 00:14:59.089
a very common thing you want, you want 
a prefix or a suffix off of this string,

321
00:14:59.089 --> 00:15:02.090
it's really common to either eliminate 
the first character,

322
00:15:02.090 --> 00:15:03.470
which means beginning of string,

323
00:15:03.470 --> 00:15:05.644
or eliminate the second part of the range,

324
00:15:05.644 --> 00:15:07.370
which means the end of the string.

325
00:15:07.370 --> 00:15:13.129
So this basically says 0 
up to but not including 2, so that's Mo.

326
00:15:13.129 --> 00:15:18.929
And this one says 8 through the end, 
which means thon.

327
00:15:18.929 --> 00:15:22.465
And then you can eliminate them both 
and so it means the whole thing.

328
00:15:22.465 --> 00:15:24.549
Why do you want to do this? I don't know.

329
00:15:24.549 --> 00:15:29.460
I say it's syntactically there 
just for completeness.

330
00:15:29.460 --> 00:15:34.000
So up next, we're going to continue learning 
how we can manipulate strings.