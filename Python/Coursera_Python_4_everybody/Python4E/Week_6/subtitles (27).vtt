WEBVTT

1
00:00:09.009 --> 00:00:10.650
Hello and welcome to Chapter Four.

2
00:00:10.650 --> 00:00:12.651
Now, we're going to come back and

3
00:00:12.651 --> 00:00:17.003
visit what I alluded to in the first
chapter of the fourth pattern for code.

4
00:00:17.003 --> 00:00:22.430
Sequential, conditional, iterations,
and then store and reuse.

5
00:00:22.430 --> 00:00:27.570
This is the store and reuse pattern,
and the basic essence of the store and

6
00:00:27.570 --> 00:00:31.930
reuse pattern is that we, as programmers,
do not like repeating ourselves.

7
00:00:31.930 --> 00:00:35.370
So, if you have like four lines of code, and
you want to do the same thing later,

8
00:00:35.370 --> 00:00:36.970
and you put it down here.

9
00:00:36.970 --> 00:00:40.650
And then, you put it later. And what if
you find something wrong with those four

10
00:00:40.650 --> 00:00:42.560
lines of code? Then you've got to
find all the places, and,

11
00:00:42.560 --> 00:00:45.260
let's just say you put it 
100 places in your program.

12
00:00:45.260 --> 00:00:48.080
You've got to find all 100 places and
fix the mistake.

13
00:00:48.080 --> 00:00:51.720
So we say well, why don't we put that
one place and give it a name, and

14
00:00:51.720 --> 00:00:54.130
then use it in all the other places?

15
00:00:54.130 --> 00:00:56.030
And that's exactly what store and
reuse is.

16
00:00:56.030 --> 00:01:00.452
It's the idea of don't repeat yourself,
D-R-Y, don't repeat yourself.

17
00:01:01.650 --> 00:01:05.150
So, this is what we've got here,
stored and reused steps.

18
00:01:05.150 --> 00:01:09.130
And functions are those things that
we're storing and reusing.

19
00:01:10.410 --> 00:01:12.310
So, let's take a look.

20
00:01:12.310 --> 00:01:15.440
So the new keyword that we've got is def,
d-e-f, which stands for

21
00:01:15.440 --> 00:01:18.540
start the definition of a function,
define the function.

22
00:01:18.540 --> 00:01:20.570
def is the keyword, it ends in a colon,

23
00:01:20.570 --> 00:01:23.500
just like lots of things that
start an indented block.

24
00:01:23.500 --> 00:01:24.710
That starts an indented block.

25
00:01:24.710 --> 00:01:29.010
You get the name the thing that you're
storing, I call it thing for now, and

26
00:01:29.010 --> 00:01:31.580
there's some some optional parameters,
which we'll see later,

27
00:01:31.580 --> 00:01:32.460
inside parentheses.

28
00:01:32.460 --> 00:01:34.970
Right now, we have no parameters
in this function, and

29
00:01:34.970 --> 00:01:39.920
there is an indented block, and then when
you de-indent that defines the function.

30
00:01:39.920 --> 00:01:42.760
All right, so this thing has
been de-indented, but it also

31
00:01:44.120 --> 00:01:49.020
this t is de-indented and so that is
the definition of the end of the function.

32
00:01:49.020 --> 00:01:53.590
Now, it's key to understand
that as this is parsed or

33
00:01:53.590 --> 00:01:56.010
looked at by Python it
actually doesn't execute.

34
00:01:56.010 --> 00:01:59.740
There's two executable statements there,
print and print.

35
00:01:59.740 --> 00:02:01.860
But all it does is it remembers it.

36
00:02:01.860 --> 00:02:05.915
So it sort of like stores it into a little
area almost like a variable,

37
00:02:05.915 --> 00:02:08.539
right, like a variable x = 2.

38
00:02:08.539 --> 00:02:11.060
Well, there's some x out there and
you put a 2 in it.

39
00:02:11.060 --> 00:02:14.760
Well, there is this thing out there,
t-h-i-n-g.

40
00:02:14.760 --> 00:02:16.060
And there's two lines of code in it.

41
00:02:16.060 --> 00:02:19.060
So it's like a variable
except that it holds code.

42
00:02:19.060 --> 00:02:22.423
Okay, so a function is kind of like
a variable, except that it holds code.

43
00:02:22.423 --> 00:02:25.230
And then most importantly,
it doesn't execute these lines of code.

44
00:02:25.230 --> 00:02:28.990
So, no output, there's no output here.

45
00:02:28.990 --> 00:02:31.540
Nothing comes out from that first part.

46
00:02:31.540 --> 00:02:36.400
Now, it has a side effect of extending
Python, so there's this new thing,

47
00:02:36.400 --> 00:02:38.590
"thing", that we can call.

48
00:02:38.590 --> 00:02:40.860
So we call this calling or invoking.

49
00:02:40.860 --> 00:02:44.170
So we've made one of these things,
now let's call the thing.

50
00:02:44.170 --> 00:02:45.419
So we say thing().

51
00:02:45.419 --> 00:02:48.730
And that's the syntax to
say go call the function.

52
00:02:48.730 --> 00:02:52.111
Now we've been using functions,
print is a function, right?

53
00:02:52.111 --> 00:02:56.410
print() parameter,
that's how print works.

54
00:02:56.410 --> 00:02:57.316
Well, thing is a function,

55
00:02:57.316 --> 00:03:00.413
thing(), but there just happens to
be no parameter in this because,

56
00:03:00.413 --> 00:03:02.530
this is a really simple function.

57
00:03:02.530 --> 00:03:07.440
So, what happens is,
def does nothing but remembers thing,

58
00:03:07.440 --> 00:03:12.260
then says oh, let's go back and
run that thing, run those two lines.

59
00:03:12.260 --> 00:03:13.618
So out come Hello and Fun.

60
00:03:13.618 --> 00:03:17.994
And then it comes back down to here, runs
this print statement, so out comes Zip.

61
00:03:17.994 --> 00:03:20.330
And then it says oh, run that code again.

62
00:03:20.330 --> 00:03:24.720
So this is the don't repeat yourself part.
Run this, print, print, do it, again,

63
00:03:24.720 --> 00:03:26.390
and now the program's done.

64
00:03:26.390 --> 00:03:28.510
So it comes back here.

65
00:03:28.510 --> 00:03:32.934
So one of the things about functions is
that Python, when it calls a function,

66
00:03:32.934 --> 00:03:35.357
it kind of remembers
where to come back to.

67
00:03:35.357 --> 00:03:37.440
It's like, okay, go up here.

68
00:03:37.440 --> 00:03:39.010
Now I'm done, where do I go back to?

69
00:03:39.010 --> 00:03:41.590
Oh, I remembered to come back to here,
so then do this.

70
00:03:41.590 --> 00:03:45.510
Okay, here's my coming back place,
run up again,

71
00:03:45.510 --> 00:03:47.430
run, go back to the coming back place.

72
00:03:47.430 --> 00:03:54.170
So it's like it sort of pauses this code, pause
here, run this, and then resume there.

73
00:03:54.170 --> 00:03:55.701
So it's like jump and then come back.

74
00:03:58.922 --> 00:04:03.877
So we've been using functions all along,
things like print, input, type,

75
00:04:03.877 --> 00:04:06.860
float, int. int and float do conversions,

76
00:04:06.860 --> 00:04:10.360
type tells us what kind of a thing
something is, print prints stuff out and

77
00:04:10.360 --> 00:04:12.260
input reads stuff from the user.

78
00:04:12.260 --> 00:04:17.856
And then later we'll talk about functions
that we're going to make and then use.

79
00:04:17.856 --> 00:04:20.039
As we extend Python by building functions,

80
00:04:20.039 --> 00:04:22.990
we can think of them as like
new reserves or function names.

81
00:04:22.990 --> 00:04:27.150
And so the naming conventions for function
names is the same as for variables and

82
00:04:27.150 --> 00:04:30.000
you want to avoid things like reserved
words and other things like that.

83
00:04:31.260 --> 00:04:34.090
So, function's some bit of reusable code,

84
00:04:34.090 --> 00:04:38.341
we define a function using a def
keyword, and then we call or invoke.

85
00:04:38.341 --> 00:04:41.480
We mostly say call but
I think of invoke as a little clearer.

86
00:04:41.480 --> 00:04:43.010
Like invoke this function,

87
00:04:43.010 --> 00:04:48.350
do it right, here with a function name,
parentheses, and then optional arguments.

88
00:04:48.350 --> 00:04:51.160
So here's a function that we haven't
played with yet called the max function.

89
00:04:51.160 --> 00:04:55.080
It's also another one of
Python's built-in functions and

90
00:04:55.080 --> 00:04:56.690
this is an example of an argument.

91
00:04:56.690 --> 00:05:01.230
We're passing in a string and we're asking
max finds the largest of something and

92
00:05:01.230 --> 00:05:04.770
in this case it's going to scan through
this string and find the largest letter.

93
00:05:04.770 --> 00:05:08.050
And it decides that w
is the largest letter.

94
00:05:08.050 --> 00:05:11.080
Apparently lowercase letters
are bigger than uppercase letters.

95
00:05:11.080 --> 00:05:15.320
And then it does what is called
a return and it gives us back

96
00:05:15.320 --> 00:05:18.940
the thing that it's like, you asked
me to find this and now I found a w.

97
00:05:18.940 --> 00:05:22.639
Here you go and
then that w gets assigned into big.

98
00:05:22.639 --> 00:05:25.461
So if we do a min,
which is a different function,

99
00:05:25.461 --> 00:05:29.440
we pass it in the same Hello world,
it looks for the smallest thing.

100
00:05:29.440 --> 00:05:32.000
And for some reason,
space is the smallest thing.

101
00:05:32.000 --> 00:05:34.700
So this space is what gets
sent back to tiny, and

102
00:05:34.700 --> 00:05:37.450
there's a space right there and
away we go.

103
00:05:39.950 --> 00:05:42.680
So, at some level you can
think of this max function as

104
00:05:42.680 --> 00:05:46.070
a chunk of code that's been
built into Python before.

105
00:05:46.070 --> 00:05:49.560
We are passing in an argument,
which is a string.

106
00:05:49.560 --> 00:05:54.390
There's some code inside here that runs,
reads through the argument, comes in and

107
00:05:54.390 --> 00:05:56.560
then it reads through and looks at that

108
00:05:56.560 --> 00:06:00.980
stuff, reads some stuff, and
then sends us back the answer,

109
00:06:00.980 --> 00:06:03.850
which is w, which is 
this is called return.

110
00:06:05.040 --> 00:06:06.790
It returns us something.

111
00:06:06.790 --> 00:06:11.422
And then that w, so you think it's working
on this side of this assignment statement.

112
00:06:11.422 --> 00:06:16.320
The w is the residual value,
once the max function is executed.

113
00:06:16.320 --> 00:06:21.532
And then that then is assigned into big,
and so big has the letter w in it.

114
00:06:24.303 --> 00:06:28.270
So the kinds of things that we've been
playing with so far are type conversions.

115
00:06:28.270 --> 00:06:32.250
And so here it goes Python,
it's looking at what to print.

116
00:06:32.250 --> 00:06:35.380
It's like oh, I've got an expression here but
wait a sec, I want to do this but

117
00:06:35.380 --> 00:06:37.100
wait, oh, I've got to call a function.

118
00:06:37.100 --> 00:06:40.749
So there's a little float sitting here,
a little code for float.

119
00:06:40.749 --> 00:06:45.068
We pass a 99 in and we get back 99.0 and

120
00:06:45.068 --> 00:06:50.541
then that 99.0 divided
by 100 gives us 0.99.

121
00:06:50.541 --> 00:06:54.702
So it sort of pauses its calculation and
then it goes and

122
00:06:54.702 --> 00:06:57.873
runs this float code and then comes back.

123
00:06:57.873 --> 00:07:00.920
Now we're going to make a variable i,
42, say what kind of thing is it,

124
00:07:00.920 --> 00:07:01.717
it's an integer.

125
00:07:01.717 --> 00:07:06.248
Now, what we're going to do is we're
going to pass this integer into that same

126
00:07:06.248 --> 00:07:11.583
float code, 42 into the same float code,
and out's going to come 42.0 and that's

127
00:07:11.583 --> 00:07:16.250
going to replace this in the function and
that's going to be assigned into f.

128
00:07:16.250 --> 00:07:22.144
And so surprise, surprise, we have 42 in f,
we ask what kind of a thing it is.

129
00:07:22.144 --> 00:07:26.275
And then,
it's going to do this calculation.

130
00:07:26.275 --> 00:07:30.001
Remember, it's going to do
the multiplication first,

131
00:07:30.001 --> 00:07:33.800
the division second, so
it's looking at 2 times float.

132
00:07:33.800 --> 00:07:34.920
Oh, hold on for a second.

133
00:07:34.920 --> 00:07:36.300
Stop for a moment.

134
00:07:36.300 --> 00:07:39.090
We now have to run float,
which means we take this 3,

135
00:07:39.090 --> 00:07:40.710
we pass it into the float code.

136
00:07:40.710 --> 00:07:43.194
The float sends us back,

137
00:07:43.194 --> 00:07:49.253
in this case, 3.0 which replaces
this in the function as 3.0.

138
00:07:49.253 --> 00:07:53.649
And then we end up with this
calculation of 2 times 3.0 or 6.0 and

139
00:07:53.649 --> 00:07:56.720
then on and on and
on the rest of it finishes.

140
00:07:56.720 --> 00:08:01.931
So you think of these function calls
as suspending what we're doing,

141
00:08:01.931 --> 00:08:06.965
just for a brief instant,
we're going to suspend that and then wait,

142
00:08:06.965 --> 00:08:12.463
and then the function will give us
something back to replace that, okay?

143
00:08:12.463 --> 00:08:13.567
String conversions as well.

144
00:08:17.430 --> 00:08:22.994
We have been using int and
float to do things like read things in

145
00:08:22.994 --> 00:08:29.438
because input is a function but
it always gives us back a string.

146
00:08:29.438 --> 00:08:34.339
And it gives us a string. We might use this
as a number. So the string 1-2-3 is

147
00:08:34.339 --> 00:08:39.860
not the same as 123. That is a string.
And if we do something crazy like add 1 to it,

148
00:08:39.860 --> 00:08:44.300
Boom, we get a traceback because
we can't concatenate string and

149
00:08:44.300 --> 00:08:46.280
integer just cause they're the wrong type.

150
00:08:46.280 --> 00:08:50.880
But if we take this same 123, and here's
a little code called the int function.

151
00:08:52.140 --> 00:08:55.894
We pass sval in,
which is 1-2-3 the string and

152
00:08:55.894 --> 00:09:01.768
we get back 123 the integer then that
replaces this in the function and

153
00:09:01.768 --> 00:09:05.349
then 123 integer is assigned into ival.

154
00:09:05.349 --> 00:09:07.230
And we say we hey, what kind of thing is ival?

155
00:09:07.230 --> 00:09:08.400
Well, it's an integer.

156
00:09:08.400 --> 00:09:10.791
We can add 1 to it and get 124.

157
00:09:10.791 --> 00:09:14.371
And we just came from a previous chapter,

158
00:09:14.371 --> 00:09:18.474
if we happened to call an int and
we pass hello bob,

159
00:09:22.959 --> 00:09:26.190
in, I should have used a different color.

160
00:09:27.190 --> 00:09:28.840
We pass hello bob in.

161
00:09:28.840 --> 00:09:29.686
This code blows up.

162
00:09:29.686 --> 00:09:36.430
[SOUND] And it says oh, traceback,
and that blew up.

163
00:09:36.430 --> 00:09:37.829
So even a function can blow up.

164
00:09:37.829 --> 00:09:39.200
And you know what?

165
00:09:39.200 --> 00:09:40.610
Our code blows up.

166
00:09:40.610 --> 00:09:43.343
So the function blows up and away we go.

167
00:09:47.768 --> 00:09:51.222
So up next we're going to stop
using built-in functions and

168
00:09:51.222 --> 00:09:54.142
actually define and
use a few functions of our own.