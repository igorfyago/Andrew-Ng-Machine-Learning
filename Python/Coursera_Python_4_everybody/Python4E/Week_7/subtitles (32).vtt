WEBVTT

1
00:00:08.169 --> 00:00:11.304
So up to now we've been talking 
about indefinite loops,

2
00:00:11.304 --> 00:00:13.730
and that's the use of the while keyword 
that just runs

3
00:00:13.730 --> 00:00:17.084
until some logical condition is 
false or you hit a break.

4
00:00:17.084 --> 00:00:20.260
Definite loops are finite.

5
00:00:20.260 --> 00:00:22.129
They are going over, say,

6
00:00:22.129 --> 00:00:24.289
all the lines in the file or 
all the items in a list

7
00:00:24.289 --> 00:00:26.855
or all the characters 
in a string or something.

8
00:00:26.855 --> 00:00:29.725
And for this, we use the "for" construct.

9
00:00:29.725 --> 00:00:31.940
And it's more predictable;

10
00:00:31.940 --> 00:00:33.560
and it's easier even to validate them

11
00:00:33.560 --> 00:00:36.424
because we have a set of things 
that we're going to go through,

12
00:00:36.424 --> 00:00:39.520
and it might be a lot, but we're going to 
go through all the things in the set.

13
00:00:39.520 --> 00:00:42.725
So here's a little loop, the for loop.

14
00:00:42.725 --> 00:00:46.149
So the for key – the for is the keyword.

15
00:00:46.149 --> 00:00:48.579
And so, while was the keyword for indefinite loops,

16
00:00:48.579 --> 00:00:51.000
and for is the key word for definite loops.

17
00:00:51.000 --> 00:00:53.020
So the first thing we see in a for loop is we see

18
00:00:53.020 --> 00:00:57.174
the iteration variable is explicitly 
just part of the syntax.

19
00:00:57.174 --> 00:00:59.410
i is, you can pick any variable you like.

20
00:00:59.410 --> 00:01:03.460
I happen to pick i, and everyone picks i 
for integer iteration variables.

21
00:01:03.460 --> 00:01:07.439
in is another Python reserved word.

22
00:01:07.439 --> 00:01:09.834
And then we have various forms of

23
00:01:09.834 --> 00:01:14.140
collections and we'll find that files are 
collections, lists are collections.

24
00:01:14.140 --> 00:01:17.040
This happens to be a list of 

25
00:01:17.040 --> 00:01:18.560
five integers: 5, 4, 3, 2, 1.

26
00:01:18.560 --> 00:01:22.420
And what we're doing in this for statement 
is we're saying – and again,

27
00:01:22.420 --> 00:01:24.099
it's like, it's got an indented block.

28
00:01:24.099 --> 00:01:25.150
And you got a de-indent,

29
00:01:25.150 --> 00:01:27.219
so the block has this stuff.

30
00:01:27.219 --> 00:01:30.219
I don't know, one of these days I'll 
stop writing all those little pictures.

31
00:01:30.219 --> 00:01:32.454
I can't help it.

32
00:01:32.454 --> 00:01:38.079
But at some level, what we're saying is 
execute this block five times.

33
00:01:38.079 --> 00:01:43.180
And I want i to take on the successive 
values: first time through 5,

34
00:01:43.180 --> 00:01:44.680
second time through 4,

35
00:01:44.680 --> 00:01:46.629
next 3, then 2, then 1.

36
00:01:46.629 --> 00:01:48.189
So it executes this one,

37
00:01:48.189 --> 00:01:49.915
two, three, four, five times.

38
00:01:49.915 --> 00:01:52.415
And the first time, i is 5, print.

39
00:01:52.415 --> 00:01:54.655
The second time, i is 4, print.

40
00:01:54.655 --> 00:01:56.965
The third time, i is 3, print.

41
00:01:56.965 --> 00:01:59.769
2, 1, and then we're all done.

42
00:01:59.769 --> 00:02:01.780
Blastoff. And so we just,

43
00:02:01.780 --> 00:02:06.840
we construct it in a way that we just have 
directed Python to do all the work.

44
00:02:06.840 --> 00:02:08.020
We have an iteration variable.

45
00:02:08.020 --> 00:02:09.909
We have a set of things we want to loop through.

46
00:02:09.909 --> 00:02:13.014
And it just guarantees that it's 
going to run this once,

47
00:02:13.014 --> 00:02:15.259
code once, for each of these five variables.

48
00:02:15.259 --> 00:02:17.139
Or that's another way to draw that would be,

49
00:02:17.139 --> 00:02:20.050
you know, run it once for 5, run it once for 4,

50
00:02:20.050 --> 00:02:23.620
run it once for 3, run it once for 2, 
and run it once for 1.

51
00:02:23.620 --> 00:02:27.319
5, 4, 3, 2, 1, Blastoff. Right?

52
00:02:27.319 --> 00:02:28.949
So, that's very definite.

53
00:02:28.949 --> 00:02:31.180
Python takes care of everything for us.

54
00:02:31.180 --> 00:02:35.250
We don't have to have a logical condition to 
stop or anything like that.

55
00:02:35.250 --> 00:02:36.875
It's really quite nice.

56
00:02:36.875 --> 00:02:38.590
This doesn't have to be a list of numbers.

57
00:02:38.590 --> 00:02:40.745
This is a list of strings.

58
00:02:40.745 --> 00:02:42.625
And so, I put this in a variable.

59
00:02:42.625 --> 00:02:46.800
And this is where you've got to be careful 
because I named it friend and friends,

60
00:02:46.800 --> 00:02:48.044
which makes perfect sense,

61
00:02:48.044 --> 00:02:53.275
but don't believe for a moment that 
Python understands what plurals are.

62
00:02:53.275 --> 00:02:55.844
So, friends is a list of three strings,

63
00:02:55.844 --> 00:02:58.319
and friend is an iteration variable 
that's going to go through it.

64
00:02:58.319 --> 00:03:01.539
So, I stick this list into friends.

65
00:03:01.539 --> 00:03:05.115
So square brackets, list of strings: 
Joseph, Glenn, and Sally.

66
00:03:05.115 --> 00:03:07.050
And then I have this iteration variable friend that's

67
00:03:07.050 --> 00:03:09.444
going to go through each of the strings in friends,

68
00:03:09.444 --> 00:03:14.669
so that means that friend is going to 
go once Joseph,

69
00:03:14.669 --> 00:03:17.664
the next time it's going to 
run the loop again with Glenn,

70
00:03:17.664 --> 00:03:20.664
and the third time it's going to 
run the loop with Sally.

71
00:03:20.664 --> 00:03:22.349
And so it says "Happy New Year: Joseph,"

72
00:03:22.349 --> 00:03:24.109
"Happy New Year: Glenn," 
"Happy New Year, Sally."

73
00:03:24.109 --> 00:03:27.405
So you know that this code is going to run three times,

74
00:03:27.405 --> 00:03:29.985
and friend is going to take on Joseph, Glenn,

75
00:03:29.985 --> 00:03:33.944
and Sally in successive iterations through the loop.

76
00:03:33.944 --> 00:03:40.664
So you can think of the for statement as 
sort of a complex thing.

77
00:03:40.664 --> 00:03:42.889
It is dealing with the fact of 
when it's time to

78
00:03:42.889 --> 00:03:45.479
continue and when you're done, 
it knows about that.

79
00:03:45.479 --> 00:03:48.245
And it also sets i to the new value.

80
00:03:48.245 --> 00:03:51.275
So it's like, are we done yet?

81
00:03:51.275 --> 00:03:52.750
No. Move i ahead to the new value.

82
00:03:52.750 --> 00:03:53.780
Print it.

83
00:03:53.780 --> 00:03:57.050
Are we done yet? No. Move i to the 
new value then print.

84
00:03:57.050 --> 00:03:58.930
On and on and on.

85
00:03:58.930 --> 00:04:00.931
Oh! Now we're done.

86
00:04:00.931 --> 00:04:04.099
All this logic here, this yellow bit,

87
00:04:04.099 --> 00:04:07.669
is constructed by you using the for statement.

88
00:04:07.669 --> 00:04:09.935
You can tell it what to do,

89
00:04:09.935 --> 00:04:11.264
and it just writes the code.

90
00:04:11.264 --> 00:04:15.215
You can do this with an i increment or a subtracting,

91
00:04:15.215 --> 00:04:19.259
and a while loop, and while i greater 
than zero, you could do this.

92
00:04:19.259 --> 00:04:22.295
But a for loop just does it for you.

93
00:04:22.295 --> 00:04:26.294
So for does a few things for you.

94
00:04:26.294 --> 00:04:29.080
And I like, I like in,

95
00:04:29.080 --> 00:04:34.329
I think it's basically saying for 
each of the values in

96
00:04:34.329 --> 00:04:35.560
5, 4, 3, 2, 1,

97
00:04:35.560 --> 00:04:39.805
have i take on the successive values 
and run that loop one time.

98
00:04:39.805 --> 00:04:41.225
And that's the "in".

99
00:04:41.225 --> 00:04:47.939
I think the in is a well-thought-through 
Python keyword because that's how I think of it.

100
00:04:47.939 --> 00:04:49.660
If you're a math person,

101
00:04:49.660 --> 00:04:51.300
think of it, you know,

102
00:04:51.300 --> 00:04:55.954
the member of function, I think 
that's the member of.

103
00:04:55.954 --> 00:04:58.174
Boy, it's been a while 
since I did set theory.

104
00:04:58.174 --> 00:05:02.560
I think that's member of.

105
00:05:02.560 --> 00:05:05.430
So, here's an interesting thing.

106
00:05:05.430 --> 00:05:07.295
You can kind of,

107
00:05:07.295 --> 00:05:10.285
you certainly can think of this as an iteration,

108
00:05:10.285 --> 00:05:11.485
but at some level,

109
00:05:11.485 --> 00:05:14.259
it's really just a contract that says run this

110
00:05:14.259 --> 00:05:18.084
code five times with i taking on its, 
on the values.

111
00:05:18.084 --> 00:05:21.035
So you hardly know the difference 
between it saying i equals 5,

112
00:05:21.035 --> 00:05:23.740
print i; i equals 4, print i; i equals 3,

113
00:05:23.740 --> 00:05:27.240
print i; i equals 2, print i; i equals 1, print i.

114
00:05:27.240 --> 00:05:29.785
So, in a sense, this is what happens,

115
00:05:29.785 --> 00:05:33.160
meaning that the for loop is telling us 
how long we're going to run

116
00:05:33.160 --> 00:05:36.845
and it's managing the successive values of i

117
00:05:36.845 --> 00:05:40.269
to make sure that our happy little line of code gets

118
00:05:40.269 --> 00:05:44.245
executed five times with the right value of i.

119
00:05:44.245 --> 00:05:46.175
That is the job of the for statement.

120
00:05:46.175 --> 00:05:49.454
The for statement takes care of all this for us.

121
00:05:49.454 --> 00:05:52.980
So that's one way to think about the for statement,

122
00:05:52.980 --> 00:05:56.064
even though this is a more common way to 
think about the for statement.

123
00:05:56.064 --> 00:06:02.160
This is sort of equivalent and think of 
those two things as equivalent.

124
00:06:02.160 --> 00:06:03.524
So, like I said,

125
00:06:03.524 --> 00:06:09.056
definite loops are for lists or lines in a file 
or characters in a string,

126
00:06:09.056 --> 00:06:12.579
and, you know, they iterate through members of a set.

127
00:06:12.579 --> 00:06:15.509
Up next, we're going talk about sort of loop idioms,

128
00:06:15.509 --> 00:06:20.970
and that's how we make use of loops 
and how we use loops

129
00:06:20.970 --> 00:06:23.579
to do things like find the largest 
or find the smallest or

130
00:06:23.579 --> 00:06:26.459
check to see if a value is present 
or something like that.

131
00:06:26.459 --> 00:06:28.029
So that's what's coming up next.