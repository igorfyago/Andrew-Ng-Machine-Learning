WEBVTT

1
00:00:00.260 --> 00:00:02.260
Hello and welcome to Python for Everybody.

2
00:00:03.520 --> 00:00:06.070
I'm doing a worked example,
my name's Charles Severance and

3
00:00:06.070 --> 00:00:07.578
I'm the instructor for the class.

4
00:00:07.578 --> 00:00:12.450
And the worked example that we're going to
work on right now is in Chapter 5, and

5
00:00:12.450 --> 00:00:14.540
it is Exercise 1.

6
00:00:14.540 --> 00:00:20.330
We're going to repeat, asking for
a number until the word done is entered.

7
00:00:20.330 --> 00:00:25.140
And then we're going to print the total,
and then we're going to print the count.

8
00:00:25.140 --> 00:00:26.890
And then we're going to print
the average at the end,

9
00:00:26.890 --> 00:00:28.930
and we're going to enter some numbers.

10
00:00:28.930 --> 00:00:31.240
And then we've got to do
some error checking, and

11
00:00:31.240 --> 00:00:32.320
we're going to keep on going.

12
00:00:32.320 --> 00:00:34.943
So we'll ignore this,
we'll just say Invalid input, and

13
00:00:34.943 --> 00:00:36.878
then we're going to ignore it.

14
00:00:36.878 --> 00:00:43.000
So I'm going to start from scratch,
I'm going to write I'll start my terminal.

15
00:00:43.000 --> 00:00:48.970
I'll start some Atom. and so I can,
I've opened the py4e folder.

16
00:00:48.970 --> 00:00:52.680
And that's kind of cool because
now I can do things like say,

17
00:00:52.680 --> 00:00:57.855
new folder and
say I'd like an exercise 05_01.

18
00:00:57.855 --> 00:01:01.930
And then go into exercise 05_01 and
say File, New File.

19
00:01:02.950 --> 00:01:07.730
And then say, File, Save As.

20
00:01:07.730 --> 00:01:12.270
And put it in ex_05_01, and
then name the file ex_05_01.py.

21
00:01:12.270 --> 00:01:17.250
I'm going to start
from scratch on this one,

22
00:01:17.250 --> 00:01:19.390
instead of adapting another piece of code.

23
00:01:20.486 --> 00:01:25.607
I'll say print Five and
I'm going to do this

24
00:01:25.607 --> 00:01:30.728
because now I need to
get to the point where

25
00:01:30.728 --> 00:01:36.725
I'm in the same folder
in this terminal window,

26
00:01:36.725 --> 00:01:43.631
cd Desktop/py4e/ex,
I can string these together.

27
00:01:43.631 --> 00:01:51.060
And there I am and
I say python3 ex and there I go, okay?

28
00:01:51.060 --> 00:01:52.860
So I'm in good shape.

29
00:01:52.860 --> 00:01:56.630
So there's a couple things right now and
we're going to do the total count and

30
00:01:56.630 --> 00:01:57.760
average.

31
00:01:57.760 --> 00:02:01.570
And so, this is just a basic
pattern where we're going to have,

32
00:02:01.570 --> 00:02:05.480
we're going to need an iteration
variable for the count.

33
00:02:05.480 --> 00:02:10.820
I'll call that num,
we start that at 0, and then tot,

34
00:02:10.820 --> 00:02:15.310
and I'll start that at 0.0, so that's
the running count and the running total.

35
00:02:15.310 --> 00:02:20.918
Now we need to write a loop, and I'm
going to write this as an infinite loop,

36
00:02:20.918 --> 00:02:26.887
while True, with colon, and then I'll
indent, and I'll prompt for a string,

37
00:02:26.887 --> 00:02:32.698
and remember input gives us a string,
so I'm going to call this sval = input.

38
00:02:37.285 --> 00:02:40.625
Enter a number, colon, space,

39
00:02:40.625 --> 00:02:46.640
I'm going to deal with the try and
except later.

40
00:02:46.640 --> 00:02:51.160
But you can just kind of know that the
floating point value that we're going to

41
00:02:51.160 --> 00:02:57.950
do is, sometimes this little
bit of code will fail.

42
00:02:57.950 --> 00:03:01.510
I'm just going to take
the string value here, sval.

43
00:03:01.510 --> 00:03:06.020
This input returns us a string, and
now I'm going to convert that to a float.

44
00:03:06.020 --> 00:03:10.200
I'm going to say print fval.

45
00:03:11.920 --> 00:03:17.280
So I can print that out.

46
00:03:17.280 --> 00:03:22.104
And then I'm going to do

47
00:03:22.104 --> 00:03:26.660
the num = num + 1,

48
00:03:26.660 --> 00:03:31.761
and tot = tot + fval.

49
00:03:31.761 --> 00:03:37.740
Now, I do need to deal with the situation
where I'm entering the word done.

50
00:03:37.740 --> 00:03:43.380
Now we want to check that before we
convert it to a float because done,

51
00:03:43.380 --> 00:03:45.130
well we can run this.

52
00:03:45.130 --> 00:03:47.810
It's an infinite loop, but
it'll only run a little bit.

53
00:03:47.810 --> 00:03:50.320
It won't cause us too much problem.

54
00:03:50.320 --> 00:03:55.530
If I run Python,
let me drag this over here, and

55
00:03:55.530 --> 00:04:00.430
I go 1, 2, 3, and

56
00:04:00.430 --> 00:04:05.010
if I put in something bad, it's
running. I don't have a way to get out.

57
00:04:05.010 --> 00:04:08.300
But you can see that it blew up on line 5.

58
00:04:08.300 --> 00:04:10.450
It blew up right here in line 5.

59
00:04:10.450 --> 00:04:14.540
So what we want to do is we
want it to say 1, 2, 3, done.

60
00:04:15.610 --> 00:04:20.461
But we want it to detect that we typed
in done, so here we'll just say if

61
00:04:20.461 --> 00:04:25.747
the string value that I got back from
input is double equal quote done quote,

62
00:04:28.264 --> 00:04:28.790
break.

63
00:04:31.030 --> 00:04:32.900
So that basically will break us out.

64
00:04:32.900 --> 00:04:38.760
And now, print "ALL DONE".

65
00:04:39.980 --> 00:04:41.800
I should be using single quotes here.

66
00:04:43.130 --> 00:04:44.460
Too much Java coding.

67
00:04:45.460 --> 00:04:46.770
print 'ALL DONE'.

68
00:04:46.770 --> 00:04:51.140
Then I want to say print,
what do I want to print?

69
00:04:51.140 --> 00:04:57.154
The total, the num, and then

70
00:04:57.154 --> 00:05:02.949
tot, num, tot/num.

71
00:05:04.810 --> 00:05:06.650
Now we've got to be careful,

72
00:05:06.650 --> 00:05:10.330
because we don't want to divide by 0,
but that will get us sort of a ways.

73
00:05:10.330 --> 00:05:12.490
So this is going to run,
it's going to read these things.

74
00:05:12.490 --> 00:05:14.460
It's going to accumulate here.

75
00:05:14.460 --> 00:05:15.870
This is the accumulator pattern.

76
00:05:15.870 --> 00:05:19.380
This is a counter pattern where we're
adding 1 to a current variable and

77
00:05:19.380 --> 00:05:23.050
accumulator pattern where
we're adding a value to it.

78
00:05:25.450 --> 00:05:29.300
So now we should be able to see the done.

79
00:05:29.300 --> 00:05:32.450
4, 5, and 6, and then done.

80
00:05:34.180 --> 00:05:37.630
And the total of 4
plus 5 plus 6 is 15.

81
00:05:37.630 --> 00:05:39.960
The number is 3 and the average is 5.

82
00:05:39.960 --> 00:05:42.770
So that's really good,
the ALL DONE prints out.

83
00:05:42.770 --> 00:05:46.490
I just did that for yucks and
you can see the value that's coming up.

84
00:05:46.490 --> 00:05:47.730
So that's in pretty good shape, so

85
00:05:47.730 --> 00:05:52.070
I'm going to comment this out,
and comment that out.

86
00:05:52.070 --> 00:05:57.850
So this is pretty good, it works just
the way we want it to work, 4, 5, 6.

87
00:05:57.850 --> 00:06:01.820
But if we do something
other than we're done,

88
00:06:01.820 --> 00:06:04.240
then we're going to blow up in this float.

89
00:06:04.240 --> 00:06:07.390
And so this is where we're going to
have to do a try and except.

90
00:06:07.390 --> 00:06:14.910
Because we just know that this line,
line 7, line 7 is the danger zone, okay?

91
00:06:14.910 --> 00:06:18.320
So what we're going to do is we're
going to put a try in here and

92
00:06:18.320 --> 00:06:21.180
then we're going to indent the part
of code that seems strange.

93
00:06:21.180 --> 00:06:23.400
And then we're going to
have some except code.

94
00:06:25.960 --> 00:06:28.915
And the first thing we have
to do in the except code,

95
00:06:28.915 --> 00:06:31.513
is print out the word Invalid input.

96
00:06:31.513 --> 00:06:33.486
Come back,

97
00:06:37.115 --> 00:06:42.068
print, Invalid input.

98
00:06:42.068 --> 00:06:45.020
Now, just like in an earlier example,

99
00:06:45.020 --> 00:06:48.410
we have to do something here to make
sure it doesn't just keep on going.

100
00:06:48.410 --> 00:06:52.020
because if fval doesn't work, we're not
going to see the error message that would

101
00:06:52.020 --> 00:06:54.130
be the traceback here on line 9.

102
00:06:54.130 --> 00:06:58.830
We're going to run here, but we still
don't want to add because fval will be

103
00:06:58.830 --> 00:07:00.360
so this is where we can use the continue.

104
00:07:01.490 --> 00:07:06.330
So in this code we're using both
the break to say if I'm all done, break.

105
00:07:06.330 --> 00:07:09.460
And if I have a problem,
I'll print a message out.

106
00:07:09.460 --> 00:07:13.260
And then I'll say continue, so continue
basically says go back to the top, so

107
00:07:13.260 --> 00:07:19.080
that is how when we see enter some
bad data, we print an Invalid input,

108
00:07:19.080 --> 00:07:22.130
and without adding anything new,
you don't really see it here.

109
00:07:22.130 --> 00:07:26.360
Without adding anything new, you go back
up to the top and enter a second thing.

110
00:07:26.360 --> 00:07:34.120
So now, if everything is right, I
should be able to type bad input.

111
00:07:34.120 --> 00:07:40.530
4, 5, 6, bad input, bad input, done.

112
00:07:41.810 --> 00:07:47.940
And I have a total of 15, and I have
three items, and the average is 5.0.

113
00:07:47.940 --> 00:07:49.460
So, there we go.

114
00:07:49.460 --> 00:07:54.730
That's what we are going to get and
that roughly achieves

115
00:07:54.730 --> 00:08:00.460
this same thing and
it's a combination of a loop

116
00:08:00.460 --> 00:08:05.765
with a exit mechanism. We have some
sanity checking of our input,

117
00:08:05.765 --> 00:08:08.660
so making sure that we
have some valid input.

118
00:08:08.660 --> 00:08:09.580
And we catch it, and

119
00:08:09.580 --> 00:08:13.640
we use continue to loop back up to
run the next iteration of the loop.

120
00:08:13.640 --> 00:08:15.500
And we have an accumulator pattern, and

121
00:08:15.500 --> 00:08:19.690
then we can use the accumulated data
to print what we want to print.

122
00:08:20.730 --> 00:08:24.009
So I hope that this has
been useful to you,

123
00:08:24.009 --> 00:08:27.490
exercise 5.1 for Python for Everybody.