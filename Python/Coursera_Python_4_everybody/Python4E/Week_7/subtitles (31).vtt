WEBVTT

1
00:00:08.973 --> 00:00:10.820
Welcome to Loops and Iteration.

2
00:00:10.820 --> 00:00:14.540
Basically, this is where computers
do repetitive tasks that we

3
00:00:14.540 --> 00:00:15.410
humans don't want to do.

4
00:00:15.410 --> 00:00:21.646
This is where the real power and
the real benefit of computers happen.

5
00:00:21.646 --> 00:00:23.860
Each time through the loop we
have to do something smart.

6
00:00:23.860 --> 00:00:28.037
But we can tell a computer to do it a
million times really, really quite easily.

7
00:00:28.037 --> 00:00:34.800
And so the basic idea is that at some
point in the code, you go back up, right.

8
00:00:34.800 --> 00:00:38.720
The idea is that you've done something,
let's go do that thing again.

9
00:00:38.720 --> 00:00:43.210
And the way we express that in
Python is with a couple of keywords.

10
00:00:43.210 --> 00:00:46.340
One of the keywords is the while
keyword and the for keyword.

11
00:00:46.340 --> 00:00:48.120
And so we'll start talking about the while.

12
00:00:48.120 --> 00:00:50.410
And in a bit,
we'll talk about definite loops using for.

13
00:00:50.410 --> 00:00:52.540
These are called indefinite loops.

14
00:00:52.540 --> 00:00:57.580
So while is a keyword and this is like
an if statement, this is a question.

15
00:00:57.580 --> 00:00:58.747
Is n greater than 0?

16
00:00:58.747 --> 00:01:01.730
That's leads to a true or false answer.

17
00:01:01.730 --> 00:01:07.430
And if it is true, this code executes and
if it is not true, the code is skipped.

18
00:01:07.430 --> 00:01:10.750
And in that respect,
it is exactly the same as an if.

19
00:01:10.750 --> 00:01:16.610
You could say if n was greater than 0,
run this code, otherwise skip this code.

20
00:01:16.610 --> 00:01:18.830
But that's where things get
a little bit different.

21
00:01:20.290 --> 00:01:23.120
So if it's true in this case,
n is 5, so it is true.

22
00:01:23.120 --> 00:01:24.490
So it runs this.

23
00:01:24.490 --> 00:01:29.760
It prints out 5, which prints that out and
then subtracts 1 from n, which makes it 4.

24
00:01:29.760 --> 00:01:32.150
But with the while statement,
it goes back up again.

25
00:01:33.730 --> 00:01:35.610
And it rechecks the question.

26
00:01:35.610 --> 00:01:39.810
That's another way to say this is here,
re-checks the question.

27
00:01:39.810 --> 00:01:46.420
And as long as n greater than 0 remains
true, it will dive in and do this again.

28
00:01:46.420 --> 00:01:51.020
So it dives in and prints out 4, and
then it subtracts to 3 and goes up.

29
00:01:51.020 --> 00:01:55.745
Checks again, checks again as long as
it's there, down it goes again, so

30
00:01:55.745 --> 00:02:00.620
it prints 3 and then subtracts to 2,
and then prints 2 and subtracts to 1,

31
00:02:00.620 --> 00:02:03.110
and then prints 1 and subtracts to 0.

32
00:02:03.110 --> 00:02:07.961
So in this case, n right now,
is we printed that and now n is 0,

33
00:02:07.961 --> 00:02:09.254
and it comes up.

34
00:02:09.254 --> 00:02:10.587
n is 0, and it comes up.

35
00:02:10.587 --> 00:02:11.740
Is n greater than 0?

36
00:02:11.740 --> 00:02:17.680
Well, it now switched from all
the times yes to now no, okay?

37
00:02:17.680 --> 00:02:21.300
And so, when it's no,
it comes down here and it's done.

38
00:02:21.300 --> 00:02:24.570
So when it comes up here, it skips down
to the next line and then it finishes,

39
00:02:24.570 --> 00:02:26.200
so it prints out Blastoff!

40
00:02:26.200 --> 00:02:30.551
And we see that, when we came out 
of the loop, n was 0.

41
00:02:30.551 --> 00:02:34.911
So that was like a residual value of this
little variable n after the last iteration

42
00:02:34.911 --> 00:02:35.940
through the loop.

43
00:02:35.940 --> 00:02:39.600
And that's because it was 1 and
then we subtracted 1 from it.

44
00:02:39.600 --> 00:02:41.055
And that got us to 0.

45
00:02:44.200 --> 00:02:48.922
So, an important part of any loop is what
we call the iteration variable, okay?

46
00:02:48.922 --> 00:02:50.837
And that is something that changes,

47
00:02:50.837 --> 00:02:55.058
because if we don't change anything in
the loop, then it's going to run forever.

48
00:02:55.058 --> 00:02:56.550
That's what we call an infinite loop.

49
00:02:56.550 --> 00:03:01.100
So here we have n greater than 5 and
we say while n is greater than 0,

50
00:03:01.100 --> 00:03:05.930
which is true, print this, come back up,
check again. Is n greater than 0? Yeah.

51
00:03:05.930 --> 00:03:09.678
Print this, check again,
is n greater than 0? Print this.

52
00:03:09.678 --> 00:03:13.230
And this is when you read your shampoo and
it says lather, rinse, and repeat.

53
00:03:13.230 --> 00:03:15.630
This is what a computer scientist
thinks when they read that.

54
00:03:15.630 --> 00:03:18.060
It's like, that would be an infinite loop.

55
00:03:18.060 --> 00:03:18.880
You're going to run out of water,

56
00:03:18.880 --> 00:03:22.780
you're going to run out of shampoo, you're
going to run out of something, right?

57
00:03:22.780 --> 00:03:27.210
But the technical problem is,
is that n is not changing.

58
00:03:27.210 --> 00:03:28.490
n is not changing.

59
00:03:28.490 --> 00:03:33.070
And so what happens is there's no way for
this true to become false.

60
00:03:33.070 --> 00:03:36.820
There's no way, it just stays true,
and so that's an infinite loop.

61
00:03:36.820 --> 00:03:40.440
And that will literally run until
your computer's battery runs out or

62
00:03:40.440 --> 00:03:44.460
you unplug it or
you hit some escape or whatever.

63
00:03:44.460 --> 00:03:48.420
If your computer is spinning in a beach
ball, it's got some little weird

64
00:03:48.420 --> 00:03:52.790
little thing, it's probably in a loop that
is either infinite or nearly infinite.

65
00:03:52.790 --> 00:03:55.713
So this is a bad thing to do
because it locks up computers.

66
00:03:55.713 --> 00:03:58.556
If you write code to do this and
you run it on your computer,

67
00:03:58.556 --> 00:04:01.342
you will probably get some kind
of a spinning beach ball or

68
00:04:01.342 --> 00:04:04.826
whatever that your computer,
whichever your operating system does,

69
00:04:04.826 --> 00:04:07.750
because it's not good to put your
computer in an infinite loop.

70
00:04:08.930 --> 00:04:13.924
And so we need somehow to have
an iteration variable that changes and

71
00:04:13.924 --> 00:04:17.353
in this previous one,
I subtracted 1 from n.

72
00:04:17.353 --> 00:04:22.056
And so this variable eventually
went from true, true, true, true,

73
00:04:22.056 --> 00:04:24.698
true, false, and so it became false.

74
00:04:24.698 --> 00:04:28.170
This question became false,
which gets us out of the loop.

75
00:04:28.170 --> 00:04:32.760
This variable that we use to control it
is what we call an iteration variable.

76
00:04:32.760 --> 00:04:36.250
Because it controls how
long the iterations run and

77
00:04:36.250 --> 00:04:38.310
when the iterations stop.

78
00:04:38.310 --> 00:04:41.590
So this is an infinite loop because we're
not affecting the iteration variable.

79
00:04:41.590 --> 00:04:43.520
The iteration variable still is n.

80
00:04:43.520 --> 00:04:47.332
And then we have another sort of version
of this loop that shows that these loops

81
00:04:47.332 --> 00:04:49.870
are what are called zero-trip loop.

82
00:04:49.870 --> 00:04:54.560
And that is when this one comes in,
this one starts out false.

83
00:04:54.560 --> 00:04:58.790
And so it skips it. And so this basically
functions like an if statement.

84
00:04:58.790 --> 00:05:03.252
So it's okay, it comes in,
it's false, skip.

85
00:05:03.252 --> 00:05:06.030
Never runs either of these statements.

86
00:05:07.430 --> 00:05:12.610
Now, we have some statements that
we can use to get out of a loop.

87
00:05:12.610 --> 00:05:15.250
One of them is the break statement.

88
00:05:15.250 --> 00:05:17.490
And it's an executable statement.

89
00:05:17.490 --> 00:05:21.810
When it runs,
it basically breaks out of the loop,

90
00:05:21.810 --> 00:05:24.040
moves to the line beyond
the end of the loop.

91
00:05:25.500 --> 00:05:29.961
So wherever we're at, when this code runs,
it jumps out of the loop.

92
00:05:32.382 --> 00:05:34.970
And so we're going to have a loop.

93
00:05:34.970 --> 00:05:37.030
This is an infinite loop.

94
00:05:37.030 --> 00:05:38.620
I just told you not to do infinite loops,

95
00:05:38.620 --> 00:05:40.580
but we're going to use break
to get out of this loop.

96
00:05:40.580 --> 00:05:44.770
So while true, remember I said, it starts
out true, can it ever get to false?

97
00:05:44.770 --> 00:05:47.370
Well, in this case, it's never going to
get to false because it's always true.

98
00:05:47.370 --> 00:05:51.480
While true, we've constructed an infinite
loop and what does this loop do?

99
00:05:51.480 --> 00:05:55.600
It asks for a line of input 
with a little arrow sign.

100
00:05:55.600 --> 00:05:58.120
And then we type something
like hello there.

101
00:05:58.120 --> 00:06:01.850
It goes in, we check to see if
the line we typed was d-o-n-e.

102
00:06:01.850 --> 00:06:05.270
If so, we break, that's not true,
so then we print the line.

103
00:06:05.270 --> 00:06:08.940
Then we go up, prompt again, print it.

104
00:06:10.040 --> 00:06:12.880
Prompt again and this time,
we type in done.

105
00:06:12.880 --> 00:06:14.460
So done gets typed.

106
00:06:14.460 --> 00:06:17.460
So this becomes true, so we execute here.

107
00:06:17.460 --> 00:06:21.650
And it immediately leaves, so
it doesn't print the word done here.

108
00:06:21.650 --> 00:06:25.842
It prints that string to
indicate that we've left.

109
00:06:25.842 --> 00:06:27.520
This can be quite a long loop in here.

110
00:06:27.520 --> 00:06:31.190
This can be a lot of and you can even
say break a couple of different places.

111
00:06:31.190 --> 00:06:33.721
And you usually put
the break inside an if test.

112
00:06:33.721 --> 00:06:40.180
And as soon as the break executes,
the loop is done, it is out of the loop.

113
00:06:40.180 --> 00:06:41.370
So you can think of it as

114
00:06:44.150 --> 00:06:45.660
Here's the block, here's the de-indent.

115
00:06:45.660 --> 00:06:47.459
So it's this much, this is a block.

116
00:06:48.510 --> 00:06:50.900
The break escapes the block, right?

117
00:06:50.900 --> 00:06:55.090
It gets out of that loop block,
the block of code that is the loop.

118
00:06:56.840 --> 00:06:59.450
You can think of it as like 
a transporter, right?

119
00:06:59.450 --> 00:07:01.590
You're coming in,
you're doing a bunch of stuff.

120
00:07:01.590 --> 00:07:03.930
You're doing this and
you're doing this and you're doing this.

121
00:07:03.930 --> 00:07:06.860
Some other thing, some other thing, 
and like, oh bang!

122
00:07:06.860 --> 00:07:08.170
Hit the break key!

123
00:07:08.170 --> 00:07:09.710
Leave. Right?

124
00:07:09.710 --> 00:07:10.490
So whatever it is,

125
00:07:10.490 --> 00:07:15.820
however much code is in this loop,
the break says get out of this loop.

126
00:07:15.820 --> 00:07:18.530
Get to the next line
beyond the end of the loop.

127
00:07:18.530 --> 00:07:21.430
It's not to go to a different
place in the loop.

128
00:07:21.430 --> 00:07:23.840
It's escape the loop directly and
instantaneously.

129
00:07:25.560 --> 00:07:27.000
That's the break statement.

130
00:07:27.000 --> 00:07:30.830
The other statement that does
something like this is the continue.

131
00:07:30.830 --> 00:07:36.140
And so continue basically says
quit on the current iteration and

132
00:07:36.140 --> 00:07:38.820
go to the next iteration.

133
00:07:38.820 --> 00:07:42.170
So it skips out of the loop, but

134
00:07:42.170 --> 00:07:46.020
it doesn't skip to the line beyond it,
it skips back up to the top.

135
00:07:46.020 --> 00:07:48.870
So continue says, oh,
we're going to go up to the top.

136
00:07:48.870 --> 00:07:53.590
Break says get out and continue says
don't do the rest of this iteration but

137
00:07:53.590 --> 00:07:55.810
go up and do the next iteration.

138
00:07:55.810 --> 00:07:58.180
So we have taken this
exact same bit of code and

139
00:07:58.180 --> 00:08:00.700
the only bit we added to it was right here.

140
00:08:00.700 --> 00:08:02.150
So, we read a line.

141
00:08:03.280 --> 00:08:06.600
If the first character is a pound sign,
we continue.

142
00:08:06.600 --> 00:08:09.335
If the entire line is done, we break.

143
00:08:09.335 --> 00:08:12.150
And so breaking is what
gets us out at this point.

144
00:08:12.150 --> 00:08:13.260
Get out and we say done.

145
00:08:14.320 --> 00:08:18.865
And what we do is if we find a line like
this one that has pound sign as the first

146
00:08:18.865 --> 00:08:22.201
character, we skip back to
the beginning of the loop.

147
00:08:22.201 --> 00:08:24.500
We go back down and we do another input.

148
00:08:24.500 --> 00:08:26.160
So we don't print that.

149
00:08:26.160 --> 00:08:30.710
But we say something here and
so it does not print the line.

150
00:08:30.710 --> 00:08:31.950
So it skips that.

151
00:08:31.950 --> 00:08:35.904
So it's like skipping to the top of
the loop, not skipping out of the loop.

152
00:08:35.904 --> 00:08:39.600
So break skips out of the loop and
continue skips to the top of the loop.

153
00:08:41.580 --> 00:08:42.320
And again,

154
00:08:42.320 --> 00:08:46.170
same kind of thing, you're running
through this loop, all kinds of ways.

155
00:08:46.170 --> 00:08:47.600
You don't hit the continue.

156
00:08:47.600 --> 00:08:51.110
You just happen to stumble and you run
a continue statement and you go back up to

157
00:08:51.110 --> 00:08:53.770
the top of the loop, meaning there's
nothing down here that you run.

158
00:08:55.190 --> 00:08:56.800
The continue doesn't get
you out of the loop,

159
00:08:56.800 --> 00:08:59.440
the continue goes to the next
iteration basically.

160
00:08:59.440 --> 00:09:02.900
Abandons the current iteration and
goes to the next iteration.

161
00:09:02.900 --> 00:09:05.710
So these while loops
are kind of indefinite.

162
00:09:05.710 --> 00:09:07.620
You can construct them cleverly.

163
00:09:07.620 --> 00:09:11.140
They just go and go and go until some
logic or condition becomes false.

164
00:09:11.140 --> 00:09:14.710
Hopefully, you've constructed
all the loops except one.

165
00:09:14.710 --> 00:09:19.550
I constructed it, so that it would
eventually either exit the loop or

166
00:09:19.550 --> 00:09:21.960
the condition would become false.

167
00:09:23.710 --> 00:09:26.480
It's a little hard to sometimes
verify that these things are perfect.

168
00:09:27.840 --> 00:09:31.040
Sometimes it's a little tricky to make
sure that the loop will terminate.

169
00:09:31.040 --> 00:09:36.300
Up next, we'll switch from using while to
using for and talk about definite loops.