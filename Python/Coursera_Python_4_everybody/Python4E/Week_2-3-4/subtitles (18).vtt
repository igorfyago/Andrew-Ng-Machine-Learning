WEBVTT

1
00:00:08.130 --> 00:00:10.779
So now we're going to combine everything in

2
00:00:10.779 --> 00:00:15.359
the previous lectures and we're going to 
actually make our first program.

3
00:00:15.359 --> 00:00:21.519
So, before we make this program we need to 
talk a little bit about documentation.

4
00:00:21.519 --> 00:00:25.925
We talked about mnemonic variables 
as a friendly thing for humans.

5
00:00:25.925 --> 00:00:30.039
Another thing that's a friendly thing in programs 
for humans and you will tend to realize

6
00:00:30.039 --> 00:00:32.409
that the human that you're being 
friendly to when you're

7
00:00:32.409 --> 00:00:35.040
writing code and you're doing it well is yourself.

8
00:00:35.040 --> 00:00:38.289
So good variable names are going to help you a lot.

9
00:00:38.289 --> 00:00:42.005
They might help your teaching assistant, 
but they're also going to help you.

10
00:00:42.005 --> 00:00:45.310
And comments, comments are a way for us to add

11
00:00:45.310 --> 00:00:49.329
text that's ignored by Python to our programs.

12
00:00:49.329 --> 00:00:54.655
And so, it's a great way to give a 
little idea what's going on in code.

13
00:00:54.655 --> 00:00:57.789
Maybe there's a couple of lines coming up 
that are, you know, 10 lines long,

14
00:00:57.789 --> 00:00:59.829
that's a little complex and you want to say, "Oh,

15
00:00:59.829 --> 00:01:01.810
all this is really doing is reversing the order of

16
00:01:01.810 --> 00:01:03.990
these two things..." or who knows what?

17
00:01:03.990 --> 00:01:06.969
Or you might document who wrote the code and you can

18
00:01:06.969 --> 00:01:10.495
actually just take a line of code and put 
a pound sign in front of it and then,

19
00:01:10.495 --> 00:01:12.219
instead of deleting the line of code.

20
00:01:12.219 --> 00:01:14.019
And sometimes you do that for debugging.

21
00:01:14.019 --> 00:01:15.920
You add debugging code.

22
00:01:15.920 --> 00:01:19.075
And then when you don't want the debugging code, 
you just put a pound sign.

23
00:01:19.075 --> 00:01:21.934
In case you want to take the pound sign out, 
and turn the code back on.

24
00:01:21.934 --> 00:01:25.650
So we turn it-- I use it as a way to 
turn off and on lines of code.

25
00:01:25.650 --> 00:01:29.844
So here is our word frequency 
that we keep coming back to.

26
00:01:29.844 --> 00:01:32.439
And what I've added here is 
I've added four comments.

27
00:01:32.439 --> 00:01:36.430
I've added comments that basically help us 
understand what's going on.

28
00:01:36.430 --> 00:01:38.555
And remember, I call these like paragraphs.

29
00:01:38.555 --> 00:01:43.030
Our first paragraph has human-readable code, 
human readable-text.

30
00:01:43.030 --> 00:01:44.840
Get the name of the file and open it.

31
00:01:44.840 --> 00:01:46.879
That's what's going to happen in the next two lines.

32
00:01:46.879 --> 00:01:50.370
These next five lines are count the word frequency.

33
00:01:50.370 --> 00:01:53.629
Maybe I should say make a histogram.

34
00:01:53.629 --> 00:01:55.939
So, make a histogram and you can just read this.

35
00:01:55.939 --> 00:01:57.769
And so, again, don't think of this as

36
00:01:57.769 --> 00:02:00.510
like the teacher's telling you 
you've got to write comments.

37
00:02:00.510 --> 00:02:02.114
Think this is as like, "I'll write comments

38
00:02:02.114 --> 00:02:03.590
so I remember what I was doing here."

39
00:02:03.590 --> 00:02:05.109
Why, why did I write this code?

40
00:02:05.109 --> 00:02:07.194
So write the comments to help yourself out.

41
00:02:07.194 --> 00:02:09.849
And now here, the last thing, we're all done 
and we're printing the stuff out.

42
00:02:09.849 --> 00:02:11.259
OK? So that's comments,

43
00:02:11.259 --> 00:02:17.840
that's an important part of documenting your code 
so that you can figure it out later.

44
00:02:17.840 --> 00:02:25.140
And again, the human who's going to like you 
for doing all this stuff is you. Right?

45
00:02:25.140 --> 00:02:33.134
So you, this is you and you're giving a gift 
to the future you. Right?

46
00:02:33.134 --> 00:02:36.884
So you are writing comments so that 
the future you can read the comments

47
00:02:36.884 --> 00:02:41.444
because in a day or a week or a month 
you won't quite remember what you were doing.

48
00:02:41.444 --> 00:02:42.615
So, go ahead and write comments.

49
00:02:42.615 --> 00:02:44.585
But don't write them because I said so.

50
00:02:44.585 --> 00:02:47.879
Write only the ones that you find useful 
and don't do something

51
00:02:47.879 --> 00:02:54.469
like x = 1 
# put 1 in X.

52
00:02:54.469 --> 00:02:55.590
That's kind of silly. I mean,

53
00:02:55.590 --> 00:02:57.794
everyone can figure out what x = 1 means.

54
00:02:57.794 --> 00:03:00.824
So you don't put silly comments in, just for silliness.

55
00:03:00.824 --> 00:03:03.280
You just put them in so that you can,

56
00:03:03.280 --> 00:03:06.180
especially when you have to understand 
what's going on here,

57
00:03:06.180 --> 00:03:08.160
so that people don't have to read quite so detailed.

58
00:03:08.160 --> 00:03:11.580
One of the things they would do is they would 
read this and check to see if it

59
00:03:11.580 --> 00:03:15.715
really did what you said it was going to do 
to help you debug it, for example.

60
00:03:15.715 --> 00:03:17.492
So, so that's comments.

61
00:03:17.492 --> 00:03:21.129
Documentation, very important. OK.

62
00:03:21.129 --> 00:03:26.189
So now we're going to do our first programming code.

63
00:03:26.189 --> 00:03:30.340
Now, the pattern that's going to happen in here is 
a pattern that I call,

64
00:03:30.340 --> 00:03:33.810
and I was taught 25-30, many years ago,

65
00:03:33.810 --> 00:03:37.634
input, processing, and output are the 
essential things that computers do.

66
00:03:37.634 --> 00:03:39.060
They gather some input,

67
00:03:39.060 --> 00:03:41.495
maybe from a file or from a web service,

68
00:03:41.495 --> 00:03:43.789
they do some work to it,
and then they produce something.

69
00:03:43.789 --> 00:03:47.530
In-work-out. The work is the hard part usually.

70
00:03:47.530 --> 00:03:52.585
And so this program is our first program that 
demonstrates all three of those things.

71
00:03:52.585 --> 00:03:54.055
Input, processing, and output,

72
00:03:54.055 --> 00:03:57.074
and it's a three-line program with one comment.

73
00:03:57.074 --> 00:03:59.729
So the problem that this program is trying to solve,

74
00:03:59.729 --> 00:04:03.794
for those of you who have traveled in the US 
and traveled everywhere else,

75
00:04:03.794 --> 00:04:11.895
is that the ground floor in hotels in 
most of the world is the 0 floor.

76
00:04:11.895 --> 00:04:16.439
And the ground floor in the United States 
is the 1 floor.

77
00:04:16.439 --> 00:04:22.269
And so you might find yourself in a 
European elevator asking what floor.

78
00:04:22.269 --> 00:04:26.490
I mean, what is the equivalent United States floor 
to this floor that I'm sitting on.

79
00:04:26.490 --> 00:04:28.694
So if I'm on floor 7,

80
00:04:28.694 --> 00:04:31.134
what would be this floor if I was in United States?

81
00:04:31.134 --> 00:04:33.209
And that's the problem we're going to solve.

82
00:04:33.209 --> 00:04:38.079
Now, it's probably not going to make us rich 
if we build an app for this but perhaps

83
00:04:38.079 --> 00:04:43.314
someone can get the European elevator 
converter app into some app store.

84
00:04:43.314 --> 00:04:45.120
And maybe you will get wealthy after all.

85
00:04:45.120 --> 00:04:49.240
But, for now, it just is sufficient to

86
00:04:49.240 --> 00:04:54.839
teach us about a full-blown program 
that does input, processing, and output.

87
00:04:54.839 --> 00:04:57.560
It's as simple a program as I could make.

88
00:04:57.560 --> 00:05:01.569
So, let's take a look at it. 
A comment: Convert elevator floors.

89
00:05:01.569 --> 00:05:02.920
That has nothing do with Python,

90
00:05:02.920 --> 00:05:06.144
it has to do with you or me reading about this.

91
00:05:06.144 --> 00:05:08.632
Then, input.

92
00:05:08.632 --> 00:05:15.420
Well, remember input prints out the prompt and then 
pauses and waits. And then, we type.

93
00:05:15.420 --> 00:05:17.480
And then, we type the enter key.

94
00:05:17.480 --> 00:05:19.990
Right? And then, this 0.

95
00:05:19.990 --> 00:05:22.375
This is a string.

96
00:05:22.375 --> 00:05:28.149
The string ends up being input 
in the variable inp, and then

97
00:05:28.149 --> 00:05:29.878
it continues to the next line.

98
00:05:29.878 --> 00:05:31.480
And it works on the right-hand side.

99
00:05:31.480 --> 00:05:34.029
We're going to pull this string 0,

100
00:05:34.029 --> 00:05:35.985
we have to convert it to an integer.

101
00:05:35.985 --> 00:05:37.375
Otherwise, we can't add 1 to it.

102
00:05:37.375 --> 00:05:40.439
If we did-- if we just inp + 1, 
we'd get a traceback.

103
00:05:40.439 --> 00:05:43.324
But we say, int of inp, convert it to an integer.

104
00:05:43.324 --> 00:05:46.449
Now, if you, if you mess this up and put Bob in,

105
00:05:46.449 --> 00:05:50.079
then this thing is going to blow up because int 
can't convert Bob to an integer.

106
00:05:50.079 --> 00:05:52.904
But, because we have a 0 here, we're OK.

107
00:05:52.904 --> 00:05:56.285
So then we add 1 to it and store that in usf.

108
00:05:56.285 --> 00:05:59.605
usf, mnemonic variable name, United States floor.

109
00:05:59.605 --> 00:06:04.100
inp, the input we got from the user that-- 
I'm using good variable names here.

110
00:06:04.100 --> 00:06:07.060
So, I-- we store this in and so, you know,

111
00:06:07.060 --> 00:06:11.985
we got that becomes 1 and then we 
print out the US floor, comma, usf.

112
00:06:11.985 --> 00:06:15.245
Remember, the comma produces this little space down here.

113
00:06:15.245 --> 00:06:18.914
And so we have our input, processing, and output

114
00:06:18.914 --> 00:06:22.910
in a way that builds us an application. OK?

115
00:06:22.910 --> 00:06:26.799
Now, there's lots of things left to do.

116
00:06:26.799 --> 00:06:29.019
And most programs aren't one line long.

117
00:06:29.019 --> 00:06:34.634
And there's a lot of work that we're going to 
have to learn, but this gets us a start.

118
00:06:34.634 --> 00:06:37.259
So, we've talked a lot of stuff.

119
00:06:37.259 --> 00:06:38.504
We've talked about constants.

120
00:06:38.504 --> 00:06:39.810
We've talked about variables.

121
00:06:39.810 --> 00:06:42.930
We've talked about reserved words. 
We've talked about type.

122
00:06:42.930 --> 00:06:46.500
We've talked about mnemonic variable names, 
which are both wonderful and a little

123
00:06:46.500 --> 00:06:50.294
confusing at the same time, 
operators, operator precedence.

124
00:06:50.294 --> 00:06:54.197
Focused a little bit on division where we 
talked about Python 2 versus Python 3.

125
00:06:54.197 --> 00:06:55.879
Type conversion and comments,

126
00:06:55.879 --> 00:06:58.009
and then, writing an entire program.

127
00:06:58.009 --> 00:07:01.980
So, up next, we're going to start talking about

128
00:07:01.980 --> 00:07:07.404
conditional execution using the if and the else 
and other of the reserved words.

129
00:07:07.404 --> 00:07:12.639
And this is where some of the intelligence 
starts to seem to come into computers.

130
00:07:12.639 --> 00:07:16.000
So, up next, conditional execution.