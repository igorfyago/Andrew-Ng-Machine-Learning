WEBVTT

1
00:00:08.119 --> 00:00:10.529
So welcome back. Now we're going to start

2
00:00:10.529 --> 00:00:13.080
learning about the Python language and you can

3
00:00:13.080 --> 00:00:15.630
think of this as talking to Python itself.

4
00:00:15.630 --> 00:00:17.309
And it turns out that there is a way

5
00:00:17.309 --> 00:00:19.289
on most computers - whether it's

6
00:00:19.289 --> 00:00:25.429
a Windows computer and command line or a Macintosh 
or Linux box - to get Python started.

7
00:00:25.429 --> 00:00:28.079
And if you just run Python,

8
00:00:28.079 --> 00:00:29.850
it will take, interactively,

9
00:00:29.850 --> 00:00:30.960
commands that you can type.

10
00:00:30.960 --> 00:00:33.990
And you have to type "python" at this chevron prompt,

11
00:00:33.990 --> 00:00:35.780
is what we call it,

12
00:00:35.780 --> 00:00:38.074
but this also sort of fits into what next.

13
00:00:38.074 --> 00:00:40.075
So Python is like "Okay. I'm here.

14
00:00:40.075 --> 00:00:43.679
I can handle any Python statement you can send me.

15
00:00:43.679 --> 00:00:45.740
I'm ready to do whatever it is that you want to do.

16
00:00:45.740 --> 00:00:46.899
I don't know what to do.

17
00:00:46.899 --> 00:00:49.054
I need you to tell me what to do."

18
00:00:49.054 --> 00:00:53.159
And so you can type a series of statements in Python.

19
00:00:53.159 --> 00:00:57.645
And so the first statement that you might type 
is an assignment statement; x equals 1.

20
00:00:57.645 --> 00:00:59.515
And so what is going on here?

21
00:00:59.515 --> 00:01:02.119
Now this, this assignment statement is something that

22
00:01:02.119 --> 00:01:05.465
often confuses people when they move from math to programming.

23
00:01:05.465 --> 00:01:09.250
An equal sign sort of has a direction to it; it's an arrow.

24
00:01:09.250 --> 00:01:11.364
It really is saying "Dear Python,

25
00:01:11.364 --> 00:01:15.590
you've got a lot of memory - you've got a lot of memory.

26
00:01:15.590 --> 00:01:19.685
Take a little tiny piece of that memory 
and remember it and name it x.

27
00:01:19.685 --> 00:01:23.084
I might use that - I'm going to use that later -
and stick a 1 in it."

28
00:01:23.084 --> 00:01:28.230
So this is sort of like stick 1 in a 
spare place in memory and name it x.

29
00:01:28.230 --> 00:01:31.400
print (x) says, go take whatever that spare bit of

30
00:01:31.400 --> 00:01:35.239
memory was and bring it back out 
and tell me what I put in it.

31
00:01:35.239 --> 00:01:36.875
Now, it's kind of redundant,

32
00:01:36.875 --> 00:01:39.125
but usually you're doing something 
more complex than this.

33
00:01:39.125 --> 00:01:41.263
Put something in memory and then take it back out;

34
00:01:41.263 --> 00:01:43.040
that's the first thing.

35
00:01:43.040 --> 00:01:46.099
Now what this is doing is this is 
an expression and that says take

36
00:01:46.099 --> 00:01:49.519
whatever's in x, which is a 1, and then add 1 to it,

37
00:01:49.519 --> 00:01:52.174
which becomes 2, and then stick it back in x.

38
00:01:52.174 --> 00:01:57.004
So that adds 1 to x and then we print that out 
and it's a 2 and then we quit.

39
00:01:57.004 --> 00:01:59.060
Now if you type wrong things here,

40
00:01:59.060 --> 00:02:00.324
you're going to get syntax errors.

41
00:02:00.324 --> 00:02:03.079
And Python is just going to tell you, 
you know, syntax error,

42
00:02:03.079 --> 00:02:05.984
syntax error, syntax error, and away you go.

43
00:02:05.984 --> 00:02:09.610
But this is us talking to Python.

44
00:02:09.610 --> 00:02:12.900
So what do we say to Python?

45
00:02:12.900 --> 00:02:15.500
You can almost think of this as like 
writing an essay where

46
00:02:15.500 --> 00:02:18.185
you start - and if you think back,

47
00:02:18.185 --> 00:02:22.868
you started learning an alphabet and then 
you used that alphabet to produce words

48
00:02:22.868 --> 00:02:25.189
and then used the words to produce sentences and

49
00:02:25.189 --> 00:02:27.830
then you combined sentences to make paragraphs,

50
00:02:27.830 --> 00:02:29.569
which then make a story.

51
00:02:29.569 --> 00:02:32.099
And we're going to do the same kind of thing.

52
00:02:32.099 --> 00:02:34.635
This is the program that we're ultimately going to write.

53
00:02:34.635 --> 00:02:39.469
And don't worry about understanding what this story does.

54
00:02:39.469 --> 00:02:41.270
We'll talk about this later,

55
00:02:41.270 --> 00:02:44.256
we're going to come back to this many times throughout the course.

56
00:02:44.256 --> 00:02:49.949
This is a Python story about how to count words in a file in Python.

57
00:02:49.949 --> 00:02:53.330
Okay? This solves that problem that I asked you to solve a little

58
00:02:53.330 --> 00:02:57.074
while back of what the most common word was 
and how many there are.

59
00:02:57.074 --> 00:03:01.590
And we'll come back to this several times in this course.

60
00:03:01.590 --> 00:03:03.534
So if we start at vocabulary,

61
00:03:03.534 --> 00:03:08.659
the first thing we have in every programming language 
is what's called reserved words.

62
00:03:08.659 --> 00:03:10.750
Now, what do we mean by reserved words?

63
00:03:10.750 --> 00:03:15.280
Well, these are words that if we use these words,

64
00:03:15.280 --> 00:03:20.409
we must use them to mean the thing 
that Python expects them to mean.

65
00:03:20.409 --> 00:03:22.819
Another way to put that is we can't use them elsewhere.

66
00:03:22.819 --> 00:03:26.500
We can't make up a variable named import.

67
00:03:26.500 --> 00:03:28.375
We can't make a variable named assert;

68
00:03:28.375 --> 00:03:31.370
because if Python sees assert,

69
00:03:31.370 --> 00:03:33.969
it means something very specific to Python.

70
00:03:33.969 --> 00:03:36.009
If it sees if, it means something.

71
00:03:36.009 --> 00:03:40.370
If it sees for or pass or while - where is while?

72
00:03:40.370 --> 00:03:42.190
There is while. These mean things.

73
00:03:42.190 --> 00:03:47.349
The best way to think about this is 
Python is kind of like a dog.

74
00:03:47.349 --> 00:03:50.800
And if you're talking to a dog and you say hey,

75
00:03:50.800 --> 00:03:52.615
dog, do you like,

76
00:03:52.615 --> 00:03:54.629
you know, Beethoven or Bach better?

77
00:03:54.629 --> 00:03:56.800
The dog is hearing - is like blah,

78
00:03:56.800 --> 00:03:57.819
blah, blah, blah, blah,

79
00:03:57.819 --> 00:03:59.020
blah - it doesn't care anything.

80
00:03:59.020 --> 00:04:03.169
And then you say hey - hey there, Spot.

81
00:04:03.169 --> 00:04:05.129
What do you think of the weather today?

82
00:04:05.129 --> 00:04:06.939
Do you really like, you know,

83
00:04:06.939 --> 00:04:08.590
sunsets or do you like rain better?

84
00:04:08.590 --> 00:04:09.669
And the dog is like blah,

85
00:04:09.669 --> 00:04:11.310
blah, blah, blah, blah, blah.

86
00:04:11.310 --> 00:04:16.750
And then you say something like do you think 
it's time to go for a walk? And the dog goes,

87
00:04:16.750 --> 00:04:18.040
like, walk - got it.

88
00:04:18.040 --> 00:04:19.959
And the dog's been listening to you all along.

89
00:04:19.959 --> 00:04:21.977
Most of it is blah, blah, blah, blah, blah,

90
00:04:21.977 --> 00:04:25.370
but walk is a reserved word for a dog.

91
00:04:25.370 --> 00:04:29.764
Okay? Food, treat - those are reserved words for dogs.

92
00:04:29.764 --> 00:04:31.720
Most of stuff you can say anything you want to

93
00:04:31.720 --> 00:04:33.959
a dog and they're very good listeners, right?

94
00:04:33.959 --> 00:04:36.519
But when you say a reserved word for a dog and you say

95
00:04:36.519 --> 00:04:39.740
walk and you don't deliver and then 
that dog's gonna bug you for a while.

96
00:04:39.740 --> 00:04:41.365
So you can think of that as Python.

97
00:04:41.365 --> 00:04:45.040
When Python sees global or from or for,

98
00:04:45.040 --> 00:04:47.879
it's like whoa - that's a word that means a lot to Python.

99
00:04:47.879 --> 00:04:51.912
So you'd better use it the way Python expects you to use it.

100
00:04:51.912 --> 00:04:54.560
Sentences are lines.

101
00:04:54.560 --> 00:04:56.099
And so when we write a program,

102
00:04:56.099 --> 00:05:00.019
we're writing a text file and we put a line 
and another line and another line.

103
00:05:00.019 --> 00:05:03.350
Each one of these is like a separate line 
and we've got to get them right.

104
00:05:03.350 --> 00:05:07.009
And then we construct a paragraph out of a series of lines.

105
00:05:07.009 --> 00:05:09.079
And so in this particular example,

106
00:05:09.079 --> 00:05:13.865
we have another assignment statement that's 
sticking the number 2 into the variable x,

107
00:05:13.865 --> 00:05:16.394
retrieving that 2 back in,

108
00:05:16.394 --> 00:05:19.399
adding 2 to it and sticking that sum back into x.

109
00:05:19.399 --> 00:05:21.649
Print is a function and there is

110
00:05:21.649 --> 00:05:25.240
a parameter x and that's going to cause 4 to be printed out.

111
00:05:25.240 --> 00:05:26.930
So we're using operators,

112
00:05:26.930 --> 00:05:28.790
this plus is what's called an operator,

113
00:05:28.790 --> 00:05:30.709
the equal sign is what's called an operator.

114
00:05:30.709 --> 00:05:32.814
This print is actually a function.

115
00:05:32.814 --> 00:05:35.290
This is a parameter being passed into the function.

116
00:05:35.290 --> 00:05:38.990
So there's a whole series of different kind of syntaxes that we

117
00:05:38.990 --> 00:05:43.149
use to produce the lines that we have to produce.

118
00:05:43.149 --> 00:05:48.290
Now we start combining these - the lines 
into paragraphs and make some sense.

119
00:05:48.290 --> 00:05:50.110
And so that interactive Python,

120
00:05:50.110 --> 00:05:54.290
where you're talking with the three chevron prompt - that's fun

121
00:05:54.290 --> 00:05:59.555
and it's fine to get started and type x equals 
and x equals x plus 1 and whatever.

122
00:05:59.555 --> 00:06:01.528
But don't do too much.

123
00:06:01.528 --> 00:06:03.165
And I see students all the time,

124
00:06:03.165 --> 00:06:05.420
they try to write whole programs in that and it gets a little

125
00:06:05.420 --> 00:06:08.545
frustrating because you have to type it 
perfectly from beginning to end.

126
00:06:08.545 --> 00:06:11.060
It's much more common to type something in a file.

127
00:06:11.060 --> 00:06:14.029
Once we get maybe beyond three lines of Python,

128
00:06:14.029 --> 00:06:18.350
we tend to just use a programming text editor 
like Atom or something and we put them

129
00:06:18.350 --> 00:06:20.415
all in a file and then we tell Python -

130
00:06:20.415 --> 00:06:22.918
start at the beginning of this file 
and then read through the file.

131
00:06:22.918 --> 00:06:25.805
We call this a script or a Python program.

132
00:06:25.805 --> 00:06:29.230
And in Python, we tend to call that file .py.

133
00:06:29.230 --> 00:06:31.220
And some text editors,

134
00:06:31.220 --> 00:06:33.290
like the Atom text editor which is one of those that I

135
00:06:33.290 --> 00:06:36.509
recommend, when you have a file that ends in .py,

136
00:06:36.509 --> 00:06:39.079
it syntax highlights it and gives you colors,

137
00:06:39.079 --> 00:06:42.170
and makes things pretty and helps you understand and sometimes

138
00:06:42.170 --> 00:06:45.305
even leads you towards syntax errors and mistakes that you have.

139
00:06:45.305 --> 00:06:48.410
And so scripts are stored sets of

140
00:06:48.410 --> 00:06:52.220
instruction in text files that you can 
then hand to Python to run them.

141
00:06:52.220 --> 00:06:54.500
And I have a whole bunch of videos that sort of get you

142
00:06:54.500 --> 00:06:56.900
to learning Python - getting Python installed,

143
00:06:56.900 --> 00:07:02.482
doing something interactively, and then writing 
a script and then running from the script.

144
00:07:02.482 --> 00:07:03.579
So like I said,

145
00:07:03.579 --> 00:07:06.459
you can do interactive in Python or you can run a script.

146
00:07:06.459 --> 00:07:08.910
And a script is much more common.

147
00:07:08.910 --> 00:07:12.324
Once you - after about the first 15 minutes,

148
00:07:12.324 --> 00:07:15.334
you pretty much do everything with a script.

149
00:07:15.334 --> 00:07:16.809
So what do you put in that script?

150
00:07:16.809 --> 00:07:18.759
Well, it's a series of steps.

151
00:07:18.759 --> 00:07:23.829
Now there are a couple of basic patterns that we use 
and we compose them.

152
00:07:23.829 --> 00:07:26.795
The most basic pattern is what's called sequential.

153
00:07:26.795 --> 00:07:29.680
We do one thing, then we do the next thing, 
then we do the next thing.

154
00:07:29.680 --> 00:07:32.170
Conditional is sort of intelligent where you're

155
00:07:32.170 --> 00:07:35.014
doing something and then may or may not be doing something.

156
00:07:35.014 --> 00:07:36.160
Do, do, do, something,

157
00:07:36.160 --> 00:07:37.475
something, something, maybe not,

158
00:07:37.475 --> 00:07:40.072
maybe - and you have this "if".

159
00:07:40.072 --> 00:07:41.139
If this is true,

160
00:07:41.139 --> 00:07:43.629
do this statement; if it's false, do some other statement.

161
00:07:43.629 --> 00:07:47.927
Those are called conditional steps and we'll 
show you how - in a sec how those look.

162
00:07:47.927 --> 00:07:51.040
And then the real power of computers come when we tell it

163
00:07:51.040 --> 00:07:54.375
to do something over and over and over again 
a million times, if necessary.

164
00:07:54.375 --> 00:07:57.444
And that's when we have a series of steps that need to be repeated.

165
00:07:57.444 --> 00:08:00.160
And then the fourth pattern is the store and retrieve pattern,

166
00:08:00.160 --> 00:08:03.399
which we will visit in Chapter 4.

167
00:08:03.399 --> 00:08:08.490
So this is an example of a four-line 
Python program that has four basic steps.

168
00:08:08.490 --> 00:08:11.009
Python, we - as if you typed these four lines

169
00:08:11.009 --> 00:08:13.875
into a file and then told Python to execute them.

170
00:08:13.875 --> 00:08:16.290
Python will stick 2 in the variable x,

171
00:08:16.290 --> 00:08:18.361
then it will print that out; our output will be this.

172
00:08:18.361 --> 00:08:21.490
It'll add 2 to it and then print it out again and it'll be 4.

173
00:08:21.490 --> 00:08:24.509
You can - this over here is called a flowchart.

174
00:08:24.509 --> 00:08:25.914
I don't really make you write flowcharts.

175
00:08:25.914 --> 00:08:28.095
In the old days they made us write flowcharts.

176
00:08:28.095 --> 00:08:29.480
I'm not sure that's all that valuable.

177
00:08:29.480 --> 00:08:31.924
All I'm trying to show you is the sequence of things.

178
00:08:31.924 --> 00:08:33.495
It runs this, does something,

179
00:08:33.495 --> 00:08:34.855
then it moves onto the next one,

180
00:08:34.855 --> 00:08:36.689
does this, then it moves onto the next one,

181
00:08:36.889 --> 00:08:38.534
does this, then it moves onto the next one.

182
00:08:38.534 --> 00:08:40.500
Meaning that when you're done with the statement,

183
00:08:40.500 --> 00:08:41.715
where are you going to go?

184
00:08:41.715 --> 00:08:44.415
Well, in this case, it's the simplest of all possible things.

185
00:08:44.415 --> 00:08:47.759
Where we're just going from one thing to the next thing.

186
00:08:47.759 --> 00:08:52.264
Now, it gets a little more interesting when we do conditional steps.

187
00:08:52.264 --> 00:08:56.316
And the thing that makes conditional happen is this if, right?

188
00:08:56.316 --> 00:08:59.799
The if statement is a reserved word, okay?

189
00:08:59.799 --> 00:09:01.629
And so you'll see,

190
00:09:01.629 --> 00:09:05.597
it starts at the beginning and the if has embedded in it

191
00:09:05.597 --> 00:09:09.144
a question that leads to a true or a false,

192
00:09:09.144 --> 00:09:12.220
ends in a colon, and then there's an indented block.

193
00:09:12.220 --> 00:09:14.700
And what happens is this is the conditional statement.

194
00:09:14.700 --> 00:09:17.353
Print smaller is the conditional statement,

195
00:09:17.353 --> 00:09:21.460
meaning that if x is less than 10 evaluates to true,

196
00:09:21.460 --> 00:09:22.590
then it's going to execute;

197
00:09:22.590 --> 00:09:24.004
otherwise, it's going to be skipped.

198
00:09:24.004 --> 00:09:27.960
So it can either execute it and continue or it can skip right over it.

199
00:09:27.960 --> 00:09:31.720
And so it's probably easiest to show this on this diagram,

200
00:09:31.720 --> 00:09:32.970
where you start with x equals 5,

201
00:09:32.970 --> 00:09:36.459
then you hit the if statement and the if statement is asking a question.

202
00:09:36.459 --> 00:09:37.689
If the question is true,

203
00:09:37.689 --> 00:09:41.495
you go down one road and if it's false, you go down the other road.

204
00:09:41.495 --> 00:09:43.552
In this case, x is 5;

205
00:09:43.552 --> 00:09:48.700
so this is true and so we go down this path 
and print out smaller and then we rejoin.

206
00:09:48.700 --> 00:09:51.309
And the next thing we encounter is another if statement.

207
00:09:51.309 --> 00:09:52.809
Is x greater than 20?

208
00:09:52.809 --> 00:09:54.769
Well, in that case, it's no,

209
00:09:54.769 --> 00:09:56.529
because it's not. Because x is 5.

210
00:09:56.529 --> 00:09:57.940
So we're asking the question.

211
00:09:57.940 --> 00:10:01.465
We're not changing x, we're just asking a question about x.

212
00:10:01.465 --> 00:10:03.575
So we skip right over this.

213
00:10:03.575 --> 00:10:07.330
So the way this code ultimately runs is it comes in, runs this,

214
00:10:07.330 --> 00:10:08.769
sequentially comes to here,

215
00:10:08.769 --> 00:10:12.940
conditionally does run this line of code 
and then skips completely over it.

216
00:10:12.940 --> 00:10:14.710
So it's this code never ran.

217
00:10:14.710 --> 00:10:17.365
And that's a super simple example.

218
00:10:17.365 --> 00:10:21.725
So it said the output is smaller and then finis 
and it's a super simple one.

219
00:10:21.725 --> 00:10:25.805
And what you'll find is we compose these things 
to make more complex programs.

220
00:10:25.805 --> 00:10:29.899
So conditional is the second of the 
three patterns we're going to see.

221
00:10:29.899 --> 00:10:32.090
Now the most exciting pattern is the repeat.

222
00:10:32.090 --> 00:10:34.875
And it looks a little more busy because 
we can do more stuff with it.

223
00:10:34.875 --> 00:10:40.924
So the basic idea is there are a couple of different looping keywords,

224
00:10:40.924 --> 00:10:43.330
reserved words - the while and the for.

225
00:10:43.330 --> 00:10:46.149
The while loop basically says - it functions

226
00:10:46.149 --> 00:10:48.804
kind of like an if statement in that there's a question in it.

227
00:10:48.804 --> 00:10:51.759
It doesn't hurt n; n doesn't get changed by this,

228
00:10:51.759 --> 00:10:56.409
it just looks at n and asks the question is n greater than zero?

229
00:10:56.409 --> 00:10:57.730
If it is true,

230
00:10:57.730 --> 00:10:59.620
it runs this code.

231
00:10:59.620 --> 00:11:00.820
So just like an if.

232
00:11:00.820 --> 00:11:04.870
So up to here, it looks like an if - 
if n is true, n greater than zero is true,

233
00:11:04.870 --> 00:11:05.897
it runs this code.

234
00:11:05.897 --> 00:11:07.684
Now this is a little sequential bit.

235
00:11:07.684 --> 00:11:09.060
When you're done with this, what do you do?

236
00:11:09.060 --> 00:11:10.639
Oh, we just fall onto the next one.

237
00:11:10.639 --> 00:11:14.440
And you'll notice that this is indented at 
the same level as the print statement.

238
00:11:14.440 --> 00:11:19.509
And that's how we have repeating or even ifs 
with more than one statement in it.

239
00:11:19.509 --> 00:11:22.389
And then when it de-indents, that's the end of the loop.

240
00:11:22.389 --> 00:11:25.065
And what happens is it runs this and it runs that,

241
00:11:25.065 --> 00:11:26.230
but then what does it do?

242
00:11:26.230 --> 00:11:27.634
Well, it's at the end of the loop,

243
00:11:27.634 --> 00:11:29.919
so it actually goes back up to the top of the loop.

244
00:11:29.919 --> 00:11:31.884
So it goes back up to the while statement.

245
00:11:31.884 --> 00:11:34.690
And we actually printed n out, which was 5.

246
00:11:34.690 --> 00:11:41.095
And then n became 4 and then it reevaluates 
this question - is 4 greater than zero?

247
00:11:41.095 --> 00:11:45.544
Yes, it is. So it prints 4 out and 
then it subtracts 1 and it becomes 3.

248
00:11:45.544 --> 00:11:47.250
Now, is 3 greater than zero? Yes, it is.

249
00:11:47.250 --> 00:11:48.404
Yes, it is.

250
00:11:48.404 --> 00:11:50.975
And so it goes 4, 3, 2, 1.

251
00:11:50.975 --> 00:11:53.049
Then it comes through and it prints 1 and then

252
00:11:53.049 --> 00:11:55.169
it subtracts 1 from it, so it becomes zero.

253
00:11:55.169 --> 00:11:59.889
Now it comes up and asks this question - 
is zero greater than zero?

254
00:11:59.889 --> 00:12:04.690
Because n has become zero by the 
successive iterations through this loop.

255
00:12:04.690 --> 00:12:07.059
So n becomes - is not greater than zero.

256
00:12:07.059 --> 00:12:09.865
So this switches from a true to a false.

257
00:12:09.865 --> 00:12:14.259
And false, it leaves - goes out and exits the loop.

258
00:12:14.259 --> 00:12:17.259
So over here, it goes 5,

259
00:12:17.259 --> 00:12:20.049
4, 3, 2, 1 - and then out she comes.

260
00:12:20.049 --> 00:12:22.914
Okay? And as soon as this becomes false,

261
00:12:22.914 --> 00:12:24.424
then this loop exits.

262
00:12:24.424 --> 00:12:27.159
And so that's the way we tell a program that - you know,

263
00:12:27.159 --> 00:12:32.470
we tell the computer that we want it to keep going 
until something has happened.

264
00:12:32.470 --> 00:12:34.460
Some - we have achieved something.

265
00:12:34.460 --> 00:12:36.020
Who knows what it is we're doing?

266
00:12:36.020 --> 00:12:39.370
None of these - none of these programs make any sense particularly,

267
00:12:39.370 --> 00:12:41.080
we're just sort of learning baby steps.

268
00:12:41.080 --> 00:12:42.387
Okay?

269
00:12:42.387 --> 00:12:45.054
So loops have this notion of

270
00:12:45.054 --> 00:12:48.399
iteration variables to make sure that they are not infinite loops.

271
00:12:48.399 --> 00:12:50.950
And this variable n is carefully constructed to

272
00:12:50.950 --> 00:12:54.605
start and be checked and then be changed each time through the loop.

273
00:12:54.605 --> 00:12:58.539
And that's how we make sure this loop only runs 
five times and not forever.

274
00:12:58.539 --> 00:13:01.434
Because you can construct what we call infinite loops that run forever,

275
00:13:01.434 --> 00:13:03.460
but it's not too practical;

276
00:13:03.460 --> 00:13:06.047
you just run out of battery or whatever after awhile.

277
00:13:06.047 --> 00:13:09.279
So you generally construct loops to finish so that

278
00:13:09.279 --> 00:13:12.580
they have to check to make sure that they're finished. Okay?

279
00:13:12.580 --> 00:13:16.539
So if we take a look back at that story,

280
00:13:16.539 --> 00:13:19.389
we see that in that story, that is,

281
00:13:19.389 --> 00:13:21.490
how you count the most common word in

282
00:13:21.490 --> 00:13:25.110
a file and print what the word is and how many there are,

283
00:13:25.110 --> 00:13:27.034
you find that there is some sequential code.

284
00:13:27.034 --> 00:13:30.085
And in Python, the way you can tell that it's sequential code

285
00:13:30.085 --> 00:13:33.519
is when it's not being indented - it just goes - it goes down,

286
00:13:33.519 --> 00:13:35.139
down, down, down, down.

287
00:13:35.139 --> 00:13:39.759
Now the for is another of the reserved words that a loop - so this has

288
00:13:39.759 --> 00:13:41.440
a colon and it says that's

289
00:13:41.440 --> 00:13:44.745
an indented block and there turns out to be a for within a for.

290
00:13:44.745 --> 00:13:46.565
This is called nesting.

291
00:13:46.565 --> 00:13:48.580
We'll get to that.

292
00:13:48.580 --> 00:13:51.480
And then this loop ends and it runs for awhile.

293
00:13:51.480 --> 00:13:53.590
And then there's more sequential stuff.

294
00:13:53.590 --> 00:13:55.914
There is a for, which is repeated code.

295
00:13:55.914 --> 00:13:59.830
And then there's an if nested within that for; that's conditional code.

296
00:13:59.830 --> 00:14:03.781
This'll run for awhile and then it comes out 
and does some sequential code.

297
00:14:03.781 --> 00:14:05.200
So there is, in this,

298
00:14:05.200 --> 00:14:08.654
sequential code, repeated code, and conditional code.

299
00:14:08.654 --> 00:14:12.460
So the three of the four basic patterns of programming

300
00:14:12.460 --> 00:14:15.070
we see in this file.

301
00:14:15.070 --> 00:14:18.174
And so if you look at this from an outline perspective,

302
00:14:18.174 --> 00:14:19.679
this is sort of our story.

303
00:14:19.679 --> 00:14:21.815
These are the paragraphs of our story.

304
00:14:21.815 --> 00:14:25.389
This top bit here says read the name

305
00:14:25.389 --> 00:14:29.019
of a file from the user and open that file so we can read it.

306
00:14:29.019 --> 00:14:31.264
This second paragraph says oh,

307
00:14:31.264 --> 00:14:32.470
as we read through the file,

308
00:14:32.470 --> 00:14:34.809
create a histogram that maps the number

309
00:14:34.809 --> 00:14:37.404
of words to the frequency of the words 
and each time you see a word,

310
00:14:37.404 --> 00:14:41.799
update the histogram so that we have a 
running total of all of the words,

311
00:14:41.799 --> 00:14:43.625
using a thing that we'll learn later,

312
00:14:43.625 --> 00:14:48.470
like in Chapter 10 or 9, called dictionaries.

313
00:14:48.470 --> 00:14:50.404
And that's cool, that's cool. But don't worry about it,

314
00:14:50.404 --> 00:14:52.049
don't worry about it, don't worry about it now.

315
00:14:52.049 --> 00:14:54.955
So this is making a histogram.

316
00:14:54.955 --> 00:14:58.375
Then once we have the histogram and we've read all the words,

317
00:14:58.375 --> 00:15:01.725
then we read through the histogram to find the largest.

318
00:15:01.725 --> 00:15:04.934
And then we print out the largest word and the largest count.

319
00:15:04.934 --> 00:15:08.070
And so this is a little short story with 
some sentences and paragraphs and

320
00:15:08.070 --> 00:15:13.105
an alphabet and reserved words and vocabulary and all that stuff.

321
00:15:13.105 --> 00:15:16.639
And we're kind of learning how to do it.

322
00:15:16.639 --> 00:15:20.424
Don't try to get this all right now.

323
00:15:20.424 --> 00:15:21.850
We're going to touch on this,

324
00:15:21.850 --> 00:15:25.029
we've got a whole chapter on variables 
and a whole chapter on conditional,

325
00:15:25.029 --> 00:15:26.179
a whole chapter on loops.

326
00:15:26.179 --> 00:15:29.860
Right? I just - I'm trying to give you this 
big picture so that when we get there,

327
00:15:29.860 --> 00:15:31.379
you can start putting those things together.

328
00:15:31.379 --> 00:15:34.110
And like I said, it's a little confusing.

329
00:15:34.110 --> 00:15:37.590
Generally it really starts to clear up in Chapter 6 and Chapter 7.

330
00:15:37.590 --> 00:15:40.629
So just understand that we learn little bits and

331
00:15:40.629 --> 00:15:44.720
little pieces and then it gets better toward the end.

332
00:15:44.720 --> 00:15:47.669
So thanks for listening.

333
00:15:47.669 --> 00:15:49.379
Chapter 1 was really trying to get you

334
00:15:49.379 --> 00:15:51.629
an overview of the kind of stuff that we're going to learn throughout

335
00:15:51.629 --> 00:15:56.610
the course and lay down a little bit of vocabulary 
so I can talk about things like

336
00:15:56.610 --> 00:16:00.240
microprocessors and RAM and memory and

337
00:16:00.240 --> 00:16:04.049
stuff like that so that you - so I can communicate,

338
00:16:04.049 --> 00:16:06.600
say hey, we're going to do this thing that's going to do something

339
00:16:06.600 --> 00:16:09.235
with this CPU and so that - so you can use that.

340
00:16:09.235 --> 00:16:12.000
So I hope you find this value and see in the next chapter.