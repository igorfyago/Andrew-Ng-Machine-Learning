WEBVTT

1
00:00:08.909 --> 00:00:09.860
So welcome back.

2
00:00:09.860 --> 00:00:13.700
Now, we're going to continue on the
right-hand side of assignment statements

3
00:00:13.700 --> 00:00:16.450
and talk a little bit more
about some complexity about

4
00:00:16.450 --> 00:00:18.910
what you can do with these expressions.

5
00:00:18.910 --> 00:00:24.260
So, all programming languages
have various operators where you

6
00:00:24.260 --> 00:00:28.200
say x+1 or x-1 or something like that.

7
00:00:28.200 --> 00:00:33.040
These operators historically come
back to come from the kind of

8
00:00:33.040 --> 00:00:38.130
characters that were on computers
keyboards in the 1960s, literally.

9
00:00:38.130 --> 00:00:41.977
These things called Teletypes came
from the end of World War II, and

10
00:00:41.977 --> 00:00:44.151
they had a certain set of characters.

11
00:00:44.151 --> 00:00:47.418
And we were going kind of from
a mathematical character set,

12
00:00:47.418 --> 00:00:50.749
where multiplication is a big cross or
a dot in the middle and

13
00:00:50.749 --> 00:00:54.030
exponentiation is raising
a little tiny number above it.

14
00:00:54.030 --> 00:00:58.895
And we just couldn't represent those on
these really rudimentary key punches or

15
00:00:58.895 --> 00:01:00.890
rudimentary terminals.

16
00:01:00.890 --> 00:01:06.540
So we had to map mathematical formulas and
functions into what could be done.

17
00:01:06.540 --> 00:01:14.040
And so those keyboards from 40 years ago,
50 years ago, they had a plus on it.

18
00:01:14.040 --> 00:01:16.800
So plus is a plus, they had a minus on it.

19
00:01:16.800 --> 00:01:21.460
But multiplication, which is normally
cross, is star. And division, which

20
00:01:21.460 --> 00:01:25.510
you can't put things on top of one another,
so you just made a slash for division.

21
00:01:25.510 --> 00:01:27.640
And raising to the power is a double star.

22
00:01:27.640 --> 00:01:32.190
Now, the remainder operator is something
that's not typically on calculators, but

23
00:01:32.190 --> 00:01:35.589
it's really important for computers and
we'll take a look at this.

24
00:01:36.830 --> 00:01:39.540
So, the addition operator,
pretty straightforward.

25
00:01:39.540 --> 00:01:42.812
I've kind of been using that without even
talking about it, the multiplication, and

26
00:01:42.812 --> 00:01:43.411
the division.

27
00:01:43.411 --> 00:01:49.516
So, this is 5,280 divided by 1,000,
which gives me 5.28.

28
00:01:49.516 --> 00:01:53.568
But the one that's probably the most
interesting is this modulo, or remainder,

29
00:01:53.568 --> 00:01:54.224
operation.

30
00:01:54.224 --> 00:01:57.175
And so,
the way the remainder operation works is,

31
00:01:57.175 --> 00:02:00.748
in particular if this is an integer,
is it does the division.

32
00:02:00.748 --> 00:02:04.489
So it's almost like a division,
j divided by 5, but

33
00:02:04.489 --> 00:02:10.240
instead of giving the quotient, this is
the quotient, it gives the remainder.

34
00:02:11.780 --> 00:02:15.054
So, 5 divided 23 is 4 remainder 3.

35
00:02:15.054 --> 00:02:17.495
The 3 is what you get back.

36
00:02:17.495 --> 00:02:21.248
Now you might ask yourself,
why is this useful?

37
00:02:21.248 --> 00:02:26.187
So one of the ways to make this useful
is to pick a large random number and

38
00:02:26.187 --> 00:02:31.060
then use the modulo operator,
the remainder operator, with 52.

39
00:02:31.060 --> 00:02:36.960
And then you end up with a number between
0 and 51, and then you can pick a card.

40
00:02:36.960 --> 00:02:40.530
So you can take a random number,
but you modulo at 52 and

41
00:02:40.530 --> 00:02:44.650
now you can have a random
number that is of card.

42
00:02:44.650 --> 00:02:48.235
Or if you want to roll a dice,
you'd make a big, random number and

43
00:02:48.235 --> 00:02:52.250
you'd take it modulo 6 and
then it tells you what side of the dice.

44
00:02:52.250 --> 00:02:53.940
So, like games and stuff.

45
00:02:53.940 --> 00:02:57.859
There's other situations where you
can do even and odd calculations.

46
00:02:57.859 --> 00:03:00.529
Like is this an odd number
an even number? Divide it by 2 and

47
00:03:00.529 --> 00:03:01.821
see what the remainder is.

48
00:03:01.821 --> 00:03:06.471
And so,
this whole notion of the modulo operator,

49
00:03:06.471 --> 00:03:10.270
it's really useful in some situations.

50
00:03:10.270 --> 00:03:12.458
And so, that's why we obsess
about it a little bit.

51
00:03:12.458 --> 00:03:18.321
The power operator, this is like
4 times 4 times 4, which is 64.

52
00:03:18.321 --> 00:03:22.039
So those are the numeric expressions.

53
00:03:22.039 --> 00:03:25.543
Now these also have
an order of evaluation, and

54
00:03:25.543 --> 00:03:30.550
the way it works is in mathematics,
there's order of evaluation.

55
00:03:30.550 --> 00:03:35.140
There are some operators that are more
powerful than other operators.

56
00:03:35.140 --> 00:03:39.480
And you can always, if you're clever,
just put parentheses in, and

57
00:03:39.480 --> 00:03:41.330
most programmers always
put parentheses in.

58
00:03:41.330 --> 00:03:45.021
So if I was writing this line of code, and
I want it to be friendly to you so that

59
00:03:45.021 --> 00:03:48.799
you could read it more easily, I would
simply put the parentheses in for you.

60
00:03:48.799 --> 00:03:52.120
So I'd say 5 to the sixth
power goes first.

61
00:03:52.120 --> 00:03:55.299
Then this 4 divided by that goes next.

62
00:03:55.299 --> 00:03:57.406
Then this 2 times 3 goes next, and

63
00:03:57.406 --> 00:04:00.724
then we evaluate the rest of
these things left to right.

64
00:04:00.724 --> 00:04:04.649
So I just added the parentheses
that are the same.

65
00:04:04.649 --> 00:04:08.071
This is exactly the same as what it
would be without the parentheses,

66
00:04:08.071 --> 00:04:09.770
because this happens first.

67
00:04:09.770 --> 00:04:12.960
This part here happens second,
this happens third, and

68
00:04:12.960 --> 00:04:15.250
then all this other stuff happens fourth.

69
00:04:15.250 --> 00:04:18.670
So there's an order, but we're
going to teach you what the order is,

70
00:04:18.670 --> 00:04:20.832
if you weren't going to use parentheses.

71
00:04:23.100 --> 00:04:26.720
So the rule is,
parentheses override everything.

72
00:04:26.720 --> 00:04:30.810
Exponentiation is the most powerful,
multiplication and division and

73
00:04:30.810 --> 00:04:32.060
remainder are equal.

74
00:04:32.060 --> 00:04:35.573
They're the next most powerful. And addition
and subtraction. And then when in doubt,

75
00:04:35.573 --> 00:04:36.669
you just go left to right.

76
00:04:36.669 --> 00:04:39.778
So if there's a bunch of additions,
you just go left to right.

77
00:04:39.778 --> 00:04:42.820
If there's an addition and
subtractions in a bunch of stuff,

78
00:04:42.820 --> 00:04:44.162
you go left to right, okay?

79
00:04:44.162 --> 00:04:48.749
So this is a classic exam question
on computer science homework that

80
00:04:48.749 --> 00:04:52.373
you'd just say, okay,
what does this evaluate to?

81
00:04:52.373 --> 00:04:54.533
Now of course, if you have Python,

82
00:04:54.533 --> 00:04:57.781
you just type it in and
it tells you what the answer is.

83
00:04:57.781 --> 00:05:02.269
So the way I used to do these, back in
the day when I was doing these homeworks,

84
00:05:02.269 --> 00:05:05.658
because I would write the expression
down on a piece of paper.

85
00:05:05.658 --> 00:05:07.028
And then I would look through it and

86
00:05:07.028 --> 00:05:10.460
I would figure out what the first thing
was and I'd be very careful about this.

87
00:05:10.460 --> 00:05:13.472
I'm like, okay,
exponentiation happens first.

88
00:05:13.472 --> 00:05:15.735
So I'll do the 3 to
the third power which is 8.

89
00:05:15.735 --> 00:05:20.010
And then I'll rewrite the whole thing,
1 + 8 divided by 4 times 5.

90
00:05:20.010 --> 00:05:22.341
And then I would forget about this one,
and I'd look here, and go, okay,

91
00:05:22.341 --> 00:05:23.310
what's the first thing here?

92
00:05:23.310 --> 00:05:26.531
Well, 8 divided by 4 is
the first thing there.

93
00:05:26.531 --> 00:05:29.676
So, then I'd be like, 8 divided by 4,
well, that gives us 2.

94
00:05:29.676 --> 00:05:32.490
In this case, it gives us 2.0.

95
00:05:32.490 --> 00:05:35.129
And then I'd have 1 + 2.0 times 5.

96
00:05:35.129 --> 00:05:38.928
And I look, and that's the next one, so
that actually ends up being 

97
00:05:38.928 --> 00:05:41.450
10.0, and that ends up being 11.0.

98
00:05:41.450 --> 00:05:44.092
And that's why this prints out 11.0.

99
00:05:44.092 --> 00:05:48.518
And so if there are no parentheses,
you can figure out.

100
00:05:48.518 --> 00:05:53.380
Another kind of exam question is to
ask what the parentheses would be.

101
00:05:53.380 --> 00:05:58.532
So the exponentiation happens first,
the division happens second, and

102
00:05:58.532 --> 00:06:04.610
then actually you put another parentheses,
because that result is multiplied by 5.

103
00:06:04.610 --> 00:06:08.501
And so that's another way to kind of
answer the same question is say put

104
00:06:08.501 --> 00:06:10.729
the parentheses in where they belong.

105
00:06:12.560 --> 00:06:16.680
Like I said, parentheses first, power
second, multiplication third, addition,

106
00:06:16.680 --> 00:06:17.490
and then left to right.

107
00:06:17.490 --> 00:06:20.290
So when you've got nothing but addition and
subtraction, you go left to right.

108
00:06:20.290 --> 00:06:23.110
When you've got nothing but multiplication
and division, you go left to right.

109
00:06:23.110 --> 00:06:24.510
Start with the leftmost one.

110
00:06:24.510 --> 00:06:26.600
Sometimes it doesn't matter.

111
00:06:26.600 --> 00:06:29.550
In addition and subtraction, it generally
doesn't matter, but in multiplication and

112
00:06:29.550 --> 00:06:31.680
division, it can matter, left to right.

113
00:06:33.610 --> 00:06:36.000
Okay, so
we've been talking about variables,

114
00:06:36.000 --> 00:06:39.260
we've been talking about constants, and
we've been talking about expressions.

115
00:06:39.260 --> 00:06:42.750
But we also have constants that
are integers, we have constants that

116
00:06:42.750 --> 00:06:45.850
are floating point numbers, and
we have constants that are strings.

117
00:06:45.850 --> 00:06:47.570
And we can manipulate these.

118
00:06:47.570 --> 00:06:51.890
And Python carefully tracks not only
what the value in a variable is but

119
00:06:51.890 --> 00:06:53.790
what kind of a value it is.

120
00:06:53.790 --> 00:06:56.400
So is it a string, is it an integer,
is it a flowing point?

121
00:06:56.400 --> 00:06:58.150
And sometimes this makes a difference.

122
00:06:58.150 --> 00:07:00.270
And here's a little example code.

123
00:07:00.270 --> 00:07:02.290
We have this plus operator.

124
00:07:02.290 --> 00:07:05.721
And the plus operator is looking
at its two operands, 1 and 4.

125
00:07:05.721 --> 00:07:07.890
It's like, oh, those are integers.

126
00:07:07.890 --> 00:07:09.260
I know what to do with integers.

127
00:07:09.260 --> 00:07:10.680
That means addition.

128
00:07:10.680 --> 00:07:15.880
And so, it adds this to be 5 and
then sticks it into ddd and out comes 5.

129
00:07:15.880 --> 00:07:20.330
On the other hand, we can actually use the
same plus operator concatenating strings

130
00:07:20.330 --> 00:07:21.980
because the plus operator
looks to its left,

131
00:07:21.980 --> 00:07:24.590
looks to its right, says,
whoa, those are strings.

132
00:07:24.590 --> 00:07:25.890
And I know what you mean.

133
00:07:25.890 --> 00:07:27.440
I think you mean to concatenate this.

134
00:07:27.440 --> 00:07:32.001
And so we end up with, hello, the space
is very carefully constructed right there

135
00:07:32.001 --> 00:07:33.929
because the plus doesn't add a space.

136
00:07:33.929 --> 00:07:38.788
So this ends up being hello space there,
and that little space is the space here.

137
00:07:38.788 --> 00:07:42.763
And so Python knows, in this example,
these are all constants,

138
00:07:42.763 --> 00:07:46.898
but it knows type of constants, and
it knows the type of variables.

139
00:07:46.898 --> 00:07:50.879
And it can do very different things.
And it can blow up and be unhappy,

140
00:07:50.879 --> 00:07:53.660
as we'll soon see,
based on the type of things.

141
00:07:54.800 --> 00:07:57.413
So here we have an example
of something that's unhappy.

142
00:07:57.413 --> 00:07:59.692
So I have now concatenated hello and 
there, and

143
00:07:59.692 --> 00:08:03.640
then Python's perfectly happy to do that,
and then I stick that in eee.

144
00:08:03.640 --> 00:08:07.608
And now I say I want to add 1 to it, and
it looks to its left, looks to its right,

145
00:08:07.608 --> 00:08:09.657
this is a string and this is an integer.

146
00:08:09.657 --> 00:08:13.505
And Python says,
I don't know how to do that.

147
00:08:13.505 --> 00:08:16.818
Python could know how to do it, but
it's chosen now to know how to do that.

148
00:08:16.818 --> 00:08:21.844
And so you get the dreaded traceback,
and traceback is like syntax error.

149
00:08:21.844 --> 00:08:26.223
It's not Python telling you that you're
a bad programmer or that you're never

150
00:08:26.223 --> 00:08:30.960
going to be a programmer or that you're
completely unsuitable for a programmer.

151
00:08:30.960 --> 00:08:35.100
What Python is saying is I,
Python, am lost.

152
00:08:35.100 --> 00:08:37.230
You told me to do something
I don't know how to do.

153
00:08:38.340 --> 00:08:42.100
You need to go remember what it is
that I'm capable of doing as Python.

154
00:08:42.100 --> 00:08:43.790
Please come back and fix it.

155
00:08:43.790 --> 00:08:46.470
It also means that the program stops.

156
00:08:46.470 --> 00:08:49.730
Meaning that if you're in a multi-line
script and you're doing a bunch of stuff

157
00:08:49.730 --> 00:08:53.630
and there's a traceback here,
the code after that quits, okay?

158
00:08:53.630 --> 00:08:57.510
And that's because you've hit
this line that Python is lost and

159
00:08:57.510 --> 00:08:59.650
Python is loathe to continue.

160
00:08:59.650 --> 00:09:03.520
Now we'll see in a bit that you'll be
able to force it to continue if you want.

161
00:09:03.520 --> 00:09:07.576
But because you said something
that Python didn't understand,

162
00:09:07.576 --> 00:09:09.354
it just quits at that point.

163
00:09:09.354 --> 00:09:15.385
And traceback, line 1 in this case, tells
you where it is that this thing blew up.

164
00:09:15.385 --> 00:09:18.876
And so this looks like nasty gibberish but
after a while,

165
00:09:18.876 --> 00:09:23.400
it won't take you long at all to just
relax, look for the word traceback.

166
00:09:23.400 --> 00:09:25.810
That means Python quit somewhere.

167
00:09:25.810 --> 00:09:27.070
It tells you where.

168
00:09:27.070 --> 00:09:31.475
And then you look a little bit farther and
it tells you what's wrong.

169
00:09:31.475 --> 00:09:37.158
TypeError, it's unhappy with the type, and
it's still referring up to this line of code.

170
00:09:37.158 --> 00:09:42.235
It says, I can't convert integer
objects to string implicitly.

171
00:09:42.235 --> 00:09:45.385
So it's like you have told it to do
something combining a string and

172
00:09:45.385 --> 00:09:46.011
an integer.

173
00:09:46.011 --> 00:09:50.908
And Python is like, I am lost, but
I'm giving you as much clue as to how

174
00:09:50.908 --> 00:09:54.430
I got lost, what got me lost,
where I got lost.

175
00:09:54.430 --> 00:09:58.600
I got lost, where I got lost, and
what caused me to get lost, and

176
00:09:58.600 --> 00:10:03.173
Python is trying as hard as it can to
clue you in to what's going wrong.

177
00:10:03.173 --> 00:10:05.352
So, don't look at this as like bad.

178
00:10:05.352 --> 00:10:06.639
Look at this as like, oh.

179
00:10:06.639 --> 00:10:10.840
I have not quite communicated to
Python the way I want to communicate.

180
00:10:10.840 --> 00:10:13.450
There's a way to solve this,
there's a way to do something here, but.

181
00:10:14.920 --> 00:10:19.290
So if we take Python and we think about
Python and say, hey, you're so picky and

182
00:10:19.290 --> 00:10:23.300
you blow up if I do the least
little mistake on types.

183
00:10:23.300 --> 00:10:24.880
Help me out here.

184
00:10:24.880 --> 00:10:30.077
And so it turns out that Python has
a built-in function called type.

185
00:10:30.077 --> 00:10:33.958
So again, it's type with parentheses, function
calls have parentheses on them, and

186
00:10:33.958 --> 00:10:35.263
we pass something in.

187
00:10:35.263 --> 00:10:40.500
And we're like, hey Python, tell me
what the type of the variable eee is and

188
00:10:40.500 --> 00:10:44.060
Python prints out, oh, it's a string.

189
00:10:44.060 --> 00:10:49.140
What is the type of the constant 'hello'?
That's a string.

190
00:10:49.140 --> 00:10:53.390
What is the type of the constant 1?
That would be an integer.

191
00:10:53.390 --> 00:10:58.390
And so Python keeps track of
the value of variables and

192
00:10:58.390 --> 00:11:02.480
constants, the value and the type of it.

193
00:11:02.480 --> 00:11:06.830
And so we have to kind of manipulate this and
be aware of this as we move forward.

194
00:11:06.830 --> 00:11:09.940
And so there are several types of
numbers that we've already been

195
00:11:09.940 --> 00:11:11.800
implicitly playing with.

196
00:11:11.800 --> 00:11:16.070
Like I said, you can give a variable to
type or you can give a constant to type.

197
00:11:16.070 --> 00:11:20.580
Variables and constants that don't
have decimal places are integers,

198
00:11:20.580 --> 00:11:22.090
what are called integers.

199
00:11:22.090 --> 00:11:26.040
And variables that have decimal
places are called floating points.

200
00:11:26.040 --> 00:11:29.680
Even if this was a 98.0,
it would still be a floating point.

201
00:11:29.680 --> 00:11:34.180
As soon as you put the point there,
then that means it's a floating point.

202
00:11:34.180 --> 00:11:36.440
They are represented
internally differently.

203
00:11:37.760 --> 00:11:41.040
Floating point numbers have a greater
range than integer numbers,

204
00:11:41.040 --> 00:11:43.790
but they're not always as
precise as integer numbers.

205
00:11:43.790 --> 00:11:48.482
So floating point numbers have

206
00:11:48.482 --> 00:11:53.359
more range and less precision.

207
00:11:53.359 --> 00:11:57.407
So integers are perfect but
there's a limit, like four billion or

208
00:11:57.407 --> 00:12:00.382
four trillion or something,
there's a limit.

209
00:12:00.382 --> 00:12:01.718
Don't worry too much about that.

210
00:12:01.718 --> 00:12:03.442
There is a choice that you make.

211
00:12:03.442 --> 00:12:09.490
You tend to use floating point numbers for
things like temperatures or speed.

212
00:12:09.490 --> 00:12:12.242
Turns out that you don't use
floating point for money.

213
00:12:12.242 --> 00:12:15.316
You don't use it for money,
even though in our first examples,

214
00:12:15.316 --> 00:12:17.210
we'll be bad and we'll use it for money.

215
00:12:17.210 --> 00:12:20.460
But, shh, don't tell anybody that
I'm using floating point for money.

216
00:12:21.980 --> 00:12:23.420
If you want,
you can play with floating point and

217
00:12:23.420 --> 00:12:25.470
start finding some things
where money goes bad.

218
00:12:27.410 --> 00:12:32.270
Okay, there's actually is a number of
different movie plots that come to have to

219
00:12:32.270 --> 00:12:38.260
do with computer programs that
use floating point for money.

220
00:12:38.260 --> 00:12:41.540
I think Office Space is one of
them that I particularly like, but

221
00:12:41.540 --> 00:12:42.451
there's other ones as well.

222
00:12:43.760 --> 00:12:45.329
Why you don't use floating point for
money,

223
00:12:47.040 --> 00:12:48.880
We kind of got off track on that,
but that's okay.

224
00:12:49.900 --> 00:12:54.150
So we also have a set of built-in
functions that can convert from

225
00:12:54.150 --> 00:12:56.250
one type to another.

226
00:12:56.250 --> 00:12:58.440
There's float, there's int.

227
00:12:58.440 --> 00:13:01.890
And so float is a function and
it again has parentheses.

228
00:13:01.890 --> 00:13:03.670
We pass in 99.

229
00:13:03.670 --> 00:13:07.769
So as this expression is being evaluated,
it has to call float.

230
00:13:07.769 --> 00:13:11.331
It passes in 99, and
then what comes back is 99.0,

231
00:13:11.331 --> 00:13:15.204
which is a floating point
representation of the number 99.

232
00:13:15.204 --> 00:13:18.136
99 and 99.0 are not the same.

233
00:13:18.136 --> 00:13:19.682
This is a floating point number.

234
00:13:19.682 --> 00:13:24.998
So when this addition happens,
it produces 199.0,

235
00:13:24.998 --> 00:13:28.693
so that is a floating point 199.0.

236
00:13:28.693 --> 00:13:34.503
By calling float, you are force converting
that to a floating point number.

237
00:13:34.503 --> 00:13:39.034
If we look at, like i is 42,
we ask what type it is, well,

238
00:13:39.034 --> 00:13:42.569
that i is an integer,
we can take a variable and

239
00:13:42.569 --> 00:13:48.578
pass it into the float function and
get back 42.0 and 42.0 comes back.

240
00:13:48.578 --> 00:13:50.404
And we say what kind of thing is an f?

241
00:13:50.404 --> 00:13:51.570
Well, f is a float. Right?

242
00:13:52.740 --> 00:13:58.480
So you can see how we're manipulating
the type of things and controlling it.

243
00:13:58.480 --> 00:14:01.280
And any time we get a little confused,
we use the type function and say, hey,

244
00:14:01.280 --> 00:14:02.140
what's going on here?

245
00:14:02.140 --> 00:14:05.155
Why don't I understand
what's going on here?

246
00:14:05.155 --> 00:14:08.532
Integer division is something that
actually changed between Python 2 and

247
00:14:08.532 --> 00:14:09.073
Python 3.

248
00:14:09.073 --> 00:14:13.083
It's one of the bigger changes, the bigger
non-upwards-compatible changes

249
00:14:13.083 --> 00:14:14.871
between Python 2 and Python 3.

250
00:14:14.871 --> 00:14:17.310
And so this, I'm just reviewing.

251
00:14:17.310 --> 00:14:21.540
There are some things that
were different in Python 2.

252
00:14:21.540 --> 00:14:24.355
So 10 divided by 2,
even those are both integers,

253
00:14:24.355 --> 00:14:26.910
produces a floating point result.

254
00:14:26.910 --> 00:14:31.640
This kind of doesn't make much difference
if these are evenly divisible.

255
00:14:31.640 --> 00:14:34.299
But if they're not evenly divisible,
it makes a big difference.

256
00:14:34.299 --> 00:14:36.813
So 9 over 2 is 4.5.

257
00:14:36.813 --> 00:14:40.979
Think about if you'd put in 9
divided by 2 in a calculator,

258
00:14:40.979 --> 00:14:43.360
you wouldn't expect it to say 4.

259
00:14:43.360 --> 00:14:48.337
And in Python 2, it said 4, it actually
truncated, it actually threw this bit away.

260
00:14:48.337 --> 00:14:53.119
But in Python 3, it just automatically
converts divisions to floating point and

261
00:14:53.119 --> 00:14:55.140
so it works out quite nice, okay?

262
00:14:55.140 --> 00:14:58.187
So 9 over 2 is 4.5.

263
00:14:58.187 --> 00:15:00.546
In Python 2, this used to be 4.

264
00:15:00.546 --> 00:15:05.460
And then 99 over 100 is 0.99,
exactly what you would expect in Python 3.

265
00:15:05.460 --> 00:15:08.930
In Python 2, that was a 0.

266
00:15:08.930 --> 00:15:09.520
Why?

267
00:15:09.520 --> 00:15:10.520
Because it truncated.

268
00:15:10.520 --> 00:15:12.766
It didn't even round the numbers,
it chopped them off.

269
00:15:12.766 --> 00:15:17.343
So this was really quite
a silly artifact of Python 2.

270
00:15:17.343 --> 00:15:22.460
In Python 2, if you get stuck in Python 2,
you'd just use floating point numbers.

271
00:15:22.460 --> 00:15:26.594
And once either side of the division or
any other operation is a floating point

272
00:15:26.594 --> 00:15:29.726
number, then the calculation
is done in floating point.

273
00:15:29.726 --> 00:15:35.965
So, if it's floating point input on either
side, then it's floating point output.

274
00:15:35.965 --> 00:15:40.275
And this is what we used to have to do
kind of in Python 2 is force things to be

275
00:15:40.275 --> 00:15:42.930
floating if we were doing divisions.

276
00:15:42.930 --> 00:15:45.550
It wouldn't hurt to do it in Python 3, but

277
00:15:45.550 --> 00:15:49.500
now integer division in Python 3
makes a lot more sense, thank heaven.

278
00:15:50.600 --> 00:15:52.330
Okay, string conversions.

279
00:15:52.330 --> 00:15:55.398
So if we read data,
which we're going to see in a second,

280
00:15:55.398 --> 00:15:58.020
from the outside world
it comes in as strings.

281
00:15:58.020 --> 00:16:00.115
Whether we're reading it from a network or
from a database,

282
00:16:00.115 --> 00:16:01.812
we tend to get these things as strings.

283
00:16:01.812 --> 00:16:08.566
And so what we're showing here
is a string value that's 123,

284
00:16:08.566 --> 00:16:12.965
but it's not really 123, it's three characters.

285
00:16:12.965 --> 00:16:17.800
It might as well be A, B, C, so 1, 2, 3,
are the first three characters.

286
00:16:17.800 --> 00:16:21.500
So, we take this string constant,
we put it in there and we say,

287
00:16:21.500 --> 00:16:23.440
okay, what kind of thing is in there.

288
00:16:23.440 --> 00:16:24.450
It's a string.

289
00:16:24.450 --> 00:16:26.780
And if we try to add 1
to it as we saw before,

290
00:16:26.780 --> 00:16:31.450
you add a string and an integer and
Python gets really unhappy.

291
00:16:31.450 --> 00:16:34.500
Can't convert an int object
to string implicitly.

292
00:16:34.500 --> 00:16:39.040
But what if we know that inside of this
string are actually digits, and we want to

293
00:16:39.040 --> 00:16:42.910
get an integer representation, or
a floating point representation of that?

294
00:16:42.910 --> 00:16:47.030
Well, in that case we can
call the int function, or

295
00:16:47.030 --> 00:16:50.940
the float function, passing in a string and
getting back an integer.

296
00:16:50.940 --> 00:16:55.377
So, this basically reads
these characters, the 1, 2, 3 and

297
00:16:55.377 --> 00:16:59.391
goes, that's 123 and gives us back 123.

298
00:16:59.391 --> 00:17:00.995
And we say,
what kind of thing is in there?

299
00:17:00.995 --> 00:17:03.540
Well, now, in ival there's an int.

300
00:17:03.540 --> 00:17:05.300
Now I'm being mnemonic here.

301
00:17:05.300 --> 00:17:06.710
I'm remembering that
this is an integer and

302
00:17:06.710 --> 00:17:09.520
this is a string, but Python doesn't
care what I name my variables.

303
00:17:09.520 --> 00:17:12.110
Remember, Python never cares
about what I name my variables.

304
00:17:12.110 --> 00:17:15.827
So, if I start naming them conveniently,
don't all of a sudden think that

305
00:17:15.827 --> 00:17:18.423
everything that starts with
the prefix i is an integer, and

306
00:17:18.423 --> 00:17:20.963
everything that starts with
the prefix s is a string.

307
00:17:22.742 --> 00:17:26.661
It'll be a number of lectures
before I stop reminding you of that.

308
00:17:29.061 --> 00:17:33.750
So, ival ends up with an integer,
the number 123.

309
00:17:33.750 --> 00:17:36.900
And now we can indeed add 1 to it,
because it's an integer and

310
00:17:36.900 --> 00:17:39.174
Python's happy, and out comes a 124.

311
00:17:39.174 --> 00:17:43.422
So, this works pretty well unless
the string that in question has no digits.

312
00:17:45.684 --> 00:17:49.317
So, if there's no digits,
it's going to blow up, it's like, whoa.

313
00:17:49.317 --> 00:17:50.600
Now, let's read it.

314
00:17:50.600 --> 00:17:53.590
Traceback means, I quit. Where?

315
00:17:53.590 --> 00:17:56.920
Line 1, it's always line 1 because
we're in this interactive environment.

316
00:17:57.980 --> 00:18:00.490
But if you were in a script,
it would tell you what line it is.

317
00:18:00.490 --> 00:18:06.011
And then it says, invalid literal for
int() with base 10: 'x'.

318
00:18:07.360 --> 00:18:09.890
And that's like, okay, it's not working very well.

319
00:18:09.890 --> 00:18:12.290
And so, you know, it'll say, that's an invalid letter.

320
00:18:12.290 --> 00:18:15.463
And, again, we'll find ways to
cope with this in later lectures.

321
00:18:16.884 --> 00:18:20.940
Okay? Now,
how do we get data from the outside world?

322
00:18:20.940 --> 00:18:25.700
So, this is the keyboard, eventually we'll
talk to networks and databases and files.

323
00:18:25.700 --> 00:18:28.680
But right now, we want to take
the keys from the keyboard, and

324
00:18:28.680 --> 00:18:29.860
get it into a variable.

325
00:18:29.860 --> 00:18:33.720
So, we have another function,
a special function, the input function.

326
00:18:34.870 --> 00:18:39.200
And when Python comes running in here,
it starts the input function, and

327
00:18:39.200 --> 00:18:41.520
the parameter to the input function
is what's called a prompt.

328
00:18:43.590 --> 00:18:47.652
It prints out who are you,
and then it waits, and

329
00:18:47.652 --> 00:18:53.910
then we type into the keyboard,
Chuck, and then we hit the Enter key.

330
00:18:53.910 --> 00:18:56.570
And then it takes this string right here,

331
00:18:56.570 --> 00:18:59.590
and then it puts it in this
variable right here.

332
00:18:59.590 --> 00:19:00.630
It is a string.

333
00:19:00.630 --> 00:19:07.000
Even if I typed in 1, 2, 3, 4, it would
be the string 1, 2, 3, 4, not 1,234.

334
00:19:07.000 --> 00:19:08.270
Okay?

335
00:19:08.270 --> 00:19:09.850
And so, that is the way.

336
00:19:09.850 --> 00:19:13.820
And so, this program at this
point pauses until we type, and

337
00:19:13.820 --> 00:19:18.550
we hit the Enter key, and then it takes
that line of input including spaces,

338
00:19:18.550 --> 00:19:21.350
whatever I type, and
puts it in that variable.

339
00:19:21.350 --> 00:19:23.080
And then the program continues.

340
00:19:23.080 --> 00:19:23.800
And in this case,

341
00:19:23.800 --> 00:19:27.940
it just prints out welcome, comma, and
then the contents of the variable nam.

342
00:19:29.780 --> 00:19:32.570
And in this case, this space right here
that you see between welcome and

343
00:19:32.570 --> 00:19:34.840
Chuck, that is caused by this comma.

344
00:19:34.840 --> 00:19:37.500
We've mostly seen print being
printing one thing, but

345
00:19:37.500 --> 00:19:40.480
you can have as many things as you
want with commas in print, and

346
00:19:40.480 --> 00:19:43.320
every comma adds a space, and
so, it's kind of friendly.

347
00:19:43.320 --> 00:19:46.200
If you wanted to you'd have to
concatenate these things together

348
00:19:46.200 --> 00:19:48.680
to eliminate that space,
but most commonly when you're

349
00:19:48.680 --> 00:19:51.239
printing out a list of things you
probably want spaces between them.

350
00:19:52.370 --> 00:19:55.590
Okay? So that's how we read input.

351
00:19:56.880 --> 00:19:59.310
Up next, we're going to
combine all these things, and

352
00:19:59.310 --> 00:20:03.390
we're going to make our very first program
that does actually something useful.

353
00:20:03.390 --> 00:20:04.250
So, we'll see you in a bit.