WEBVTT

1
00:00:08.932 --> 00:00:10.510
Hello and welcome to Chapter 3.

2
00:00:10.510 --> 00:00:12.730
Now we're going to talk
about conditional execution.

3
00:00:12.730 --> 00:00:16.390
Conditional execution is where we start
sort of adding more intelligence.

4
00:00:16.390 --> 00:00:19.381
Sequential execution,
you just type them in and Python does it.

5
00:00:19.381 --> 00:00:23.430
But sequential execution is where
you can choose one of two paths.

6
00:00:23.430 --> 00:00:25.110
Turn left, or turn right, or go straight.

7
00:00:25.110 --> 00:00:26.962
You can make choices and

8
00:00:26.962 --> 00:00:32.063
this is an essential part of
making computers seem intelligent.

9
00:00:32.063 --> 00:00:35.648
And so the key to this 
is the if statement.

10
00:00:35.648 --> 00:00:39.540
So the if statement is the reserved word
that indicates that we're going to do

11
00:00:39.540 --> 00:00:43.160
something conditionally and
it's not that hard to read.

12
00:00:43.160 --> 00:00:47.580
So the if statement has a condition,
it's really a question.

13
00:00:47.580 --> 00:00:50.500
Unlike x = 5, which changes
potentially the value of x,

14
00:00:50.500 --> 00:00:54.250
x less than 10 is asking a question.
It's asking, is x less than 10?

15
00:00:54.250 --> 00:00:57.030
And that returns a true or a false.

16
00:00:57.030 --> 00:01:01.400
In this point because x is 5,
x is indeed less than 10 so it's true.

17
00:01:01.400 --> 00:01:03.590
These if statements end in a colon.

18
00:01:03.590 --> 00:01:05.470
And they start an indented block of text.

19
00:01:05.470 --> 00:01:10.040
It's kind of like an outline that
basically says, if this is true,

20
00:01:10.040 --> 00:01:11.390
do this statement.

21
00:01:11.390 --> 00:01:13.700
Otherwise, skip the statement.

22
00:01:13.700 --> 00:01:17.900
So in this case, it comes in, x is less
than 10, so it does the statement.

23
00:01:17.900 --> 00:01:18.810
Then it comes back and says,

24
00:01:18.810 --> 00:01:24.430
if x is greater than 20, this one
evaluates to false, and so that skips it.

25
00:01:24.430 --> 00:01:27.315
So that's why we see Smaller print out 
and Finis print out,

26
00:01:27.315 --> 00:01:28.825
and this line never executes.

27
00:01:28.825 --> 00:01:30.464
So that's why I call it conditional.

28
00:01:30.464 --> 00:01:33.362
Depending on this question
that's being asked,

29
00:01:33.362 --> 00:01:38.170
the line inside the indented block
will either execute or not execute.

30
00:01:38.170 --> 00:01:43.360
And so you can kind of look at this
as if you were driving a car, right?

31
00:01:43.360 --> 00:01:47.204
You execute this statement then it goes to
the next one, then it asks the question.

32
00:01:47.204 --> 00:01:51.636
Is x less than 10? If the answer is yes,
it turns this way and drives down here and

33
00:01:51.636 --> 00:01:53.382
runs this code, does that thing.

34
00:01:53.382 --> 00:01:54.796
And then it rejoins.

35
00:01:54.796 --> 00:01:56.718
And then it says, oh, is x less than 20?

36
00:01:56.718 --> 00:01:59.860
Well, since x is 5, the answer is no.

37
00:01:59.860 --> 00:02:03.331
And so that skips that completely and
then it runs this and then it's done.

38
00:02:03.331 --> 00:02:05.543
And so this code never runs, okay?

39
00:02:05.543 --> 00:02:10.418
And so when we say conditional, we say,
yes that one ran but that one did not run.

40
00:02:10.418 --> 00:02:14.670
And so that's why we call it conditional
because it may or may not run.

41
00:02:14.670 --> 00:02:18.140
The other thing that's important
about this is this indenting notion.

42
00:02:18.140 --> 00:02:21.990
That we start with an if,
have this colon, and then we indent.

43
00:02:21.990 --> 00:02:23.780
The indenting can be a variable.

44
00:02:23.780 --> 00:02:27.000
We tend to indent by four spaces.

45
00:02:27.000 --> 00:02:29.140
That's the recommended pattern.

46
00:02:29.140 --> 00:02:32.290
And we'll see in a bit the indents
can be longer than one line.

47
00:02:32.290 --> 00:02:36.280
This is only a one-line indent where you
have one line that's conditional but

48
00:02:36.280 --> 00:02:39.970
you will see in a second how we can
do this with more than one line.

49
00:02:41.210 --> 00:02:44.093
So, good time to talk about
the comparison operators.

50
00:02:44.093 --> 00:02:48.163
Again, the problem here has to do with the
limitations of the keyboards in the 1950s

51
00:02:48.163 --> 00:02:52.021
and the 1960s of computers when most of
these languages were kind of designed.

52
00:02:52.021 --> 00:02:53.964
So less than is on keyboards,

53
00:02:53.964 --> 00:02:58.190
less than followed by an equal
sign is less than or equal to.

54
00:02:58.190 --> 00:03:01.080
Double equal, this is probably the
part that's the hardest.

55
00:03:01.080 --> 00:03:02.563
Double equal is a question mark.

56
00:03:02.563 --> 00:03:07.030
Remember equals is an assignment
statement, it has kind of direction.

57
00:03:07.030 --> 00:03:07.988
x = 1, right? x = 1.

58
00:03:07.988 --> 00:03:09.384
That puts 1 in x.

59
00:03:09.384 --> 00:03:13.240
This, if you say x == 1,
you're asking the question,

60
00:03:13.240 --> 00:03:15.874
is x equal to 1 and it doesn't harm x,

61
00:03:15.874 --> 00:03:17.730
So that's probably, it takes a while.

62
00:03:19.130 --> 00:03:22.416
If I was designing a language,
I would say, assign x into 1 and

63
00:03:22.416 --> 00:03:24.220
then this would be single equals.

64
00:03:24.220 --> 00:03:28.230
But, sorry, I didn't design Python so
that's not the way it is.

65
00:03:28.230 --> 00:03:33.090
So, double equals is the question
mark version of equality.

66
00:03:33.090 --> 00:03:40.060
Greater than or equal to and greater than,
and then not equal is exclamation point.

67
00:03:40.060 --> 00:03:41.750
Another word for exclamation is bang.

68
00:03:41.750 --> 00:03:44.630
We say bang equal or not equal and

69
00:03:44.630 --> 00:03:47.900
so the exclamation point is like
not equal, sort of like emphasis.

70
00:03:47.900 --> 00:03:49.030
I don't know.

71
00:03:49.030 --> 00:03:49.770
That's how I remember it.

72
00:03:51.470 --> 00:03:55.150
Remember that none of these harm
the data that they're looking at.

73
00:03:55.150 --> 00:03:59.330
They evaluate and
then return us a true or a false.

74
00:03:59.330 --> 00:04:02.200
So here's an example of all
these things kind of in action.

75
00:04:02.200 --> 00:04:04.302
For x = 5, they're all going to be true.

76
00:04:04.302 --> 00:04:06.893
If x = 5, remember that's the question mark.

77
00:04:06.893 --> 00:04:11.324
If x is greater than 4,
and the answer's yes, print Greater than 4.

78
00:04:11.324 --> 00:04:15.680
If x greater than or equal to 5,
that's also true so this part runs.

79
00:04:15.680 --> 00:04:18.624
You can also, if it's
only one line of stuff,

80
00:04:18.624 --> 00:04:22.190
you can sort of pull this
line up to the end here.

81
00:04:22.190 --> 00:04:24.275
If x less than 6, print Less than 6.

82
00:04:25.320 --> 00:04:27.624
If x less than or equal to 5,
print Less than or equal 5.

83
00:04:27.624 --> 00:04:29.972
If x is not equal to 6, print 6.

84
00:04:29.972 --> 00:04:33.095
And so you see this pattern of indent,
end of indent.

85
00:04:33.095 --> 00:04:34.660
Indent, end of indent.

86
00:04:34.660 --> 00:04:36.390
Indent, end of indent.

87
00:04:36.390 --> 00:04:38.020
Indent, end of indent.

88
00:04:38.020 --> 00:04:40.140
So this is an important part of Python.

89
00:04:40.140 --> 00:04:44.790
Not a lot of languages make
the indenting of lines

90
00:04:44.790 --> 00:04:48.780
a syntactically meaningful thing,
but that is how Python works.

91
00:04:48.780 --> 00:04:52.340
And so if you don't indent it, it's not
going to work the way that you expected.

92
00:04:52.340 --> 00:04:56.010
Especially if you're coming from
a programming language like JavaScript,

93
00:04:56.010 --> 00:04:59.800
or Java, or C where the actual 
spacing doesn't matter.

94
00:04:59.800 --> 00:05:01.770
In Python, the spacing does matter.

95
00:05:03.410 --> 00:05:08.980
And so this is an example of a longer
block of text that's indented.

96
00:05:08.980 --> 00:05:12.595
And you can now see kind
of how this indent works.

97
00:05:12.595 --> 00:05:15.080
x is 5, we print Before 5.

98
00:05:15.080 --> 00:05:18.090
If x = 5,
this is going to be true because it is.

99
00:05:18.090 --> 00:05:19.660
Colon starts an indented block.

100
00:05:19.660 --> 00:05:22.770
Now by maintaining the same indent,

101
00:05:22.770 --> 00:05:26.820
you make this all part of
the conditionally executed block.

102
00:05:26.820 --> 00:05:31.310
So this is three lines
of code that it runs,

103
00:05:31.310 --> 00:05:34.780
it runs this line then sequentially runs
this line, sequentially runs this line.

104
00:05:34.780 --> 00:05:38.780
And we indicate when it is that we
want to get out of this block and

105
00:05:38.780 --> 00:05:41.930
then continue by de-indenting, okay?

106
00:05:41.930 --> 00:05:46.540
So when it's true it runs all of them,
then now it's running sequentially,

107
00:05:46.540 --> 00:05:48.130
sequentially, sequentially.

108
00:05:48.130 --> 00:05:50.639
And now it says, oh if, if x = 6.

109
00:05:50.639 --> 00:05:55.610
Well this one's going to be false,
then that skips all of these.

110
00:05:55.610 --> 00:05:56.800
None of these run.

111
00:05:56.800 --> 00:05:58.399
Skips all of the indented blocks.

112
00:05:58.399 --> 00:06:01.371
And so this indenting is a way to,
in effect,

113
00:06:01.371 --> 00:06:07.100
make bigger blocks of conditional code,
or multi-line blocks of conditional code.

114
00:06:08.500 --> 00:06:10.740
So, indentation is important in Python.

115
00:06:10.740 --> 00:06:13.470
It's more important in Python
than literally almost any other

116
00:06:13.470 --> 00:06:14.670
programming language.

117
00:06:14.670 --> 00:06:17.950
We always use indentation in other
programming languages to mentally

118
00:06:17.950 --> 00:06:20.180
keep track of blocks of text, but

119
00:06:20.180 --> 00:06:24.330
it's not where the programming language
will complain if you get it wrong.

120
00:06:24.330 --> 00:06:27.880
So you have to sort of think why did
you increase the indent, which is like

121
00:06:27.880 --> 00:06:31.200
if, after an if or a for or a while
statement, which we'll see in a bit.

122
00:06:31.200 --> 00:06:35.360
You maintain the indent, which means you
stay the same, or then you de-indent or

123
00:06:35.360 --> 00:06:38.870
you reduce the indent back, and
that is the way to end a block.

124
00:06:38.870 --> 00:06:40.890
So you reduce it.

125
00:06:40.890 --> 00:06:42.250
Blank lines don't matter, and

126
00:06:42.250 --> 00:06:47.450
then comments by themselves on a line
don't make any difference for indenting.

127
00:06:47.450 --> 00:06:51.650
And so, as you're doing this indenting,

128
00:06:51.650 --> 00:06:56.630
it's really natural to hit the tab
key on your computer and to move in.

129
00:06:56.630 --> 00:07:00.170
So you do if blah, blah, blah, and
then on the next the line, you hit tab.

130
00:07:00.170 --> 00:07:05.240
The problem is is that Python can
get very confused if you sometimes

131
00:07:05.240 --> 00:07:09.890
are using four spaces, space, space,
space, space, and sometimes you use tab.

132
00:07:09.890 --> 00:07:12.600
And the danger is it can look
right on your screen, but

133
00:07:12.600 --> 00:07:14.900
Python will still complain to you.

134
00:07:14.900 --> 00:07:19.470
And so if you're using a text editor that
might be putting tabs into your document,

135
00:07:20.470 --> 00:07:21.940
find where it turns them off.

136
00:07:21.940 --> 00:07:24.990
So a programmer editor,
we're not talking a word processor now,

137
00:07:24.990 --> 00:07:28.400
we're talking about a programmer editor
like Notepad or Text Wrangler.

138
00:07:28.400 --> 00:07:32.470
These have a setting, whether or
not to turn tabs into spaces or not.

139
00:07:32.470 --> 00:07:36.150
So it either puts a tab in the file or
puts spaces.

140
00:07:36.150 --> 00:07:40.020
And so this is a good time,
if you're using one of these text editors,

141
00:07:40.020 --> 00:07:45.360
to make sure to turn tabs off,
or cause tabs to be expanded.

142
00:07:45.360 --> 00:07:47.570
So you don't end up with,
in a few weeks or a few days,

143
00:07:47.570 --> 00:07:51.670
with Python errors that you just don't
understand, and that makes you grouchy.

144
00:07:51.670 --> 00:07:54.640
Here's the good news, and that is,
if you're using our recommended

145
00:07:54.640 --> 00:07:59.830
Atom text editor, once you save
the file with a .py extension,

146
00:07:59.830 --> 00:08:03.440
it automatically just uses, you can hit
the tab key and it moves in spaces.

147
00:08:03.440 --> 00:08:07.980
And so that is very nice and it's just
one of the many reasons that we recommend

148
00:08:07.980 --> 00:08:10.370
and like Atom to edit these files.

149
00:08:10.370 --> 00:08:15.560
So just understand that tab and
spaces might look the same on your screen,

150
00:08:15.560 --> 00:08:18.430
but to Python, they may or
may not be equivalent.

151
00:08:18.430 --> 00:08:22.260
And you can up with spurious
errors that Python will give you

152
00:08:22.260 --> 00:08:24.740
if you get your tabs wrong, okay?

153
00:08:24.740 --> 00:08:26.508
So here's just some of the screens.

154
00:08:26.508 --> 00:08:28.500
Depending on your tool that you're using,

155
00:08:28.500 --> 00:08:31.130
your editor that you're using,
you might have to find it.

156
00:08:31.130 --> 00:08:35.320
But it's like auto-expand tabs,
or replace tabs by spaces, etc.

157
00:08:35.320 --> 00:08:37.620
The idea is don't put
tabs in your document.

158
00:08:37.620 --> 00:08:39.432
The best practice is to use spaces and

159
00:08:39.432 --> 00:08:43.860
don't put tabs in your document when
you're writing Python programs.

160
00:08:43.860 --> 00:08:47.460
So, you have to think about this,
about the indenting and

161
00:08:47.460 --> 00:08:50.500
the de-indenting, when do you go in,
and when do you come back out?

162
00:08:50.500 --> 00:08:53.520
And so,
it's the way that we define blocks.

163
00:08:53.520 --> 00:08:57.360
So we have sequential code,
which maintains the same indent.

164
00:08:57.360 --> 00:09:01.170
Now we see the if and we see the colon,
that means we start an indent.

165
00:09:01.170 --> 00:09:04.910
And then to stay inside that block
of code, you maintain the indent.

166
00:09:04.910 --> 00:09:07.180
And then to end that block of code,
you de-indent.

167
00:09:07.180 --> 00:09:11.000
So you think of this like I am
de-indenting, I'm doing this on purpose,

168
00:09:11.000 --> 00:09:12.550
it's not like randomly.

169
00:09:12.550 --> 00:09:16.410
If this was in,
then it would function differently.

170
00:09:16.410 --> 00:09:21.038
The fact that this print is out means
it's not part of this if block.

171
00:09:21.038 --> 00:09:24.780
These two statements are part of
the conditional code, the print really

172
00:09:24.780 --> 00:09:30.220
is the thing after the if, right?

173
00:09:30.220 --> 00:09:33.770
And so this is going to run no matter
what, these two may or may not run.

174
00:09:33.770 --> 00:09:37.135
In this case, because it's true,
they are going to run and come back out.

175
00:09:37.135 --> 00:09:41.495
So, this is conditional code,

176
00:09:41.495 --> 00:09:45.050
this is sequential code.

177
00:09:46.380 --> 00:09:50.760
And if we continue down, we haven't talked
about loops yet but the for keyword is

178
00:09:50.760 --> 00:09:54.740
a loop and this is telling it to run this
thing five times, and it ends in a colon.

179
00:09:54.740 --> 00:09:56.270
And then you go in and

180
00:09:56.270 --> 00:09:59.970
then you have some sequential code, then
you have an if, this is called nested.

181
00:10:02.100 --> 00:10:03.770
That's a block within a block.

182
00:10:03.770 --> 00:10:06.910
So the if has another colon so
we go in even farther.

183
00:10:06.910 --> 00:10:09.910
And then we de-indent to
this level of this if, and

184
00:10:09.910 --> 00:10:12.380
later we de-indent to the level of the for.

185
00:10:12.380 --> 00:10:15.210
So you kind of have to
match these things up and

186
00:10:15.210 --> 00:10:19.580
decide how you're going to end your
conditional code, or end the looping code,

187
00:10:19.580 --> 00:10:22.520
which we're going to learn in
the next section how that works.

188
00:10:24.340 --> 00:10:28.240
So what you want to do after a while, and
it won't take you too long, but sort of

189
00:10:28.240 --> 00:10:32.960
train yourself to start thinking about
the fact that these are blocks of code.

190
00:10:32.960 --> 00:10:36.670
That you can sort of draw these
squares around the blocks of code.

191
00:10:36.670 --> 00:10:40.020
And I've drawn the square here,
the if starts it.

192
00:10:40.020 --> 00:10:42.770
You can also kind of use the colon
as your little mechanism.

193
00:10:42.770 --> 00:10:47.310
And then the de-indent stops it, and
so this is the conditional code.

194
00:10:47.310 --> 00:10:50.390
And then you can see where the if
starts and then it's the line

195
00:10:50.390 --> 00:10:55.360
that lines back up with the for,
that is the scope of the entire for loop.

196
00:10:55.360 --> 00:10:57.000
Same here with with the if.

197
00:10:57.000 --> 00:11:00.320
The thing that lines up,
that is the scope of that if block.

198
00:11:00.320 --> 00:11:04.021
So mentally, you have to realize 
that the de-indenting and

199
00:11:04.021 --> 00:11:06.672
indenting adds meaning to your program.

200
00:11:06.672 --> 00:11:10.607
I mean, they absolutely define which
things are going to run as part of an if

201
00:11:10.607 --> 00:11:13.780
statement or regardless of
the value in the if statement.

202
00:11:13.780 --> 00:11:17.377
So start seeing these,
and in terms of nesting,

203
00:11:17.377 --> 00:11:20.110
you can see them inside one another.

204
00:11:20.110 --> 00:11:22.630
It's like the Russian dolls,
where you've got a block of code,

205
00:11:22.630 --> 00:11:24.540
within it you've got
another block of code.

206
00:11:24.540 --> 00:11:28.140
And believe me, we'll go down, down,
down, down, down, out, out, out, out, out.

207
00:11:28.140 --> 00:11:32.090
And so,
start seeing these indenting as blocks.

208
00:11:32.090 --> 00:11:33.730
Just start feeling that.

209
00:11:35.700 --> 00:11:38.450
Like I said, nested decisions,
if there was a for loop with an if,

210
00:11:38.450 --> 00:11:42.910
we can also have a decision where
there's an if within an if.

211
00:11:42.910 --> 00:11:47.545
And so in this case, x is 42,
if x is greater than 1, that's true.

212
00:11:47.545 --> 00:11:51.295
So then we're going to print this,
if x is less than 100, that's again true.

213
00:11:51.295 --> 00:11:54.530
So we're going to go in and run this,
and then we've de-indented twice.

214
00:11:54.530 --> 00:11:57.000
And so this does line up with the if, so

215
00:11:57.000 --> 00:12:01.810
this functions as the end of both
this block and the end of this block.

216
00:12:01.810 --> 00:12:03.410
Because it lines up out here.

217
00:12:03.410 --> 00:12:06.140
So, if we look at it from
a GPS perspective, it's true,

218
00:12:06.140 --> 00:12:07.960
x is greater than 1, we print that.

219
00:12:07.960 --> 00:12:11.930
We ask another question,
that's a question, and it's yes and

220
00:12:11.930 --> 00:12:14.170
now, we're continuing back down.

221
00:12:14.170 --> 00:12:16.840
So we've kind of come out
of the indent block.

222
00:12:16.840 --> 00:12:20.290
And as you've drawn,
we kind of see this is indented once and

223
00:12:20.290 --> 00:12:23.480
this one is indented twice,
just the way I drew it.

224
00:12:23.480 --> 00:12:25.190
And the same is true here.

225
00:12:25.190 --> 00:12:29.740
This is indented once, once and
then getting too busy here.

226
00:12:29.740 --> 00:12:31.850
This one's indented once,
this one's indented once,

227
00:12:31.850 --> 00:12:34.980
this one is indented twice, all right?

228
00:12:34.980 --> 00:12:40.210
So start counting those indents and
knowing how the de-intents works.

229
00:12:40.210 --> 00:12:44.040
So we have one-way decisions and
very commonly, we have a two-way decision.

230
00:12:44.040 --> 00:12:45.280
We call this else.

231
00:12:45.280 --> 00:12:49.310
We want to basically do one thing or
another, it's like a fork in the road.

232
00:12:49.310 --> 00:12:52.250
If something is true,
in this case, is x greater than 2?

233
00:12:52.250 --> 00:12:53.810
Well, it's 4, so it is true.

234
00:12:53.810 --> 00:12:55.430
We do one thing.

235
00:12:55.430 --> 00:12:58.850
And if it's false, we do another thing.

236
00:12:58.850 --> 00:13:01.070
In this particular example,
we don't do this one.

237
00:13:01.070 --> 00:13:02.510
We only do this one over here.

238
00:13:02.510 --> 00:13:05.570
But you got the idea
that with one if test,

239
00:13:05.570 --> 00:13:10.210
we choose alternatively between one and
the other of the choices.

240
00:13:10.210 --> 00:13:13.578
So this is how we write that in Python.

241
00:13:13.578 --> 00:13:18.680
We say sequential code,
question mark, colon.

242
00:13:18.680 --> 00:13:20.210
And then we have the true part,

243
00:13:20.210 --> 00:13:24.090
this is the part that executes if
the question evaluates to true.

244
00:13:24.090 --> 00:13:28.659
And then we de-indent and use the keyword
else, so else is a Python keyword.

245
00:13:28.659 --> 00:13:32.511
And you see another colon here so
we sort of de-indent, say else and

246
00:13:32.511 --> 00:13:35.020
then re-indent and then we have this part.

247
00:13:35.020 --> 00:13:38.300
And so that's how we capture 
the other half and

248
00:13:38.300 --> 00:13:40.330
then of course it runs no matter what.

249
00:13:40.330 --> 00:13:42.560
So, if we were to do this.

250
00:13:42.560 --> 00:13:45.841
If it's true, it runs this and
then skips that.

251
00:13:45.841 --> 00:13:50.748
And if it were false,
which it's not, it would skip this,

252
00:13:50.748 --> 00:13:53.115
run this, and then continue.

253
00:13:53.115 --> 00:13:57.338
The point is,
if you use an if-else structure,

254
00:13:57.338 --> 00:14:00.740
one of these two things is going to run.

255
00:14:00.740 --> 00:14:01.900
And it's sort of the same as this,

256
00:14:01.900 --> 00:14:05.430
it comes in here,
there's no scenario in which both run.

257
00:14:05.430 --> 00:14:09.210
It's going to run one, and by running one,
it's not going to run the other one.

258
00:14:09.210 --> 00:14:10.750
That's how an if-then-else happens.

259
00:14:12.670 --> 00:14:15.690
So coming up next, we're going to talk
about some more conditional execution

260
00:14:15.690 --> 00:14:18.640
patterns, a little more complex stuff,
else if, etc.